&НаКлиенте
Перем HTTPСоединение;
&НаКлиенте
Перем ОбъектAddIn Экспорт;
&НаКлиенте
Перем ЧасовойПояс Экспорт;
&НаКлиенте
Перем ИндексыТабличныхЧастей Экспорт;
&НаКлиенте
Перем ParentWindow;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Макет = ОбъектСервер.ПолучитьМакет("ПараметрыСерверов");
	ПараметрыСерверов = Новый Структура;
	СоответствиеКолонок = Новый Соответствие;
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		СтруктураПолей = Новый Структура;
		Для НомерКолонки = 1 По Макет.ШиринаТаблицы Цикл
			Ячейка = Макет.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			ЗначениеЯчейки = Ячейка.Текст;
			КлючКолонки = "N" + Формат(НомерКолонки, "ЧДЦ=; ЧН=0; ЧГ=0");
			Если НомерСтроки = 1 Тогда
				СоответствиеКолонок.Вставить(КлючКолонки, ЗначениеЯчейки);
			Иначе
				ИмяКолонки = СоответствиеКолонок.Получить(КлючКолонки);
				СтруктураПолей.Вставить(ИмяКолонки, ЗначениеЯчейки);
			КонецЕсли;
		КонецЦикла;
		Если НомерСтроки > 1 Тогда
			ПараметрыСерверов.Вставить("N" + Формат(НомерСтроки, "ЧДЦ=; ЧН=0; ЧГ=0"), СтруктураПолей);
		КонецЕсли;
	КонецЦикла;
	Макет = ОбъектСервер.ПолучитьМакет("HTMLДокумент");
	ТекстHTML = Макет.ПолучитьТекст();
	Макет = ОбъектСервер.ПолучитьМакет("json_template");
	json_template = Макет.ПолучитьТекст();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.timeout = 30;
	Объект.History = Истина;
	ИндексыТабличныхЧастей = Новый Соответствие;
	Объект.КолСвечей = 80;
	Если ЧасовойПояс = Неопределено Тогда
		ЧасовойПояс = ПолучитьЛокальныйЧасовойПояс();
	КонецЕсли;
	Если Объект.site_api.Количество() = 0 Тогда
		ЗаполнитьAPI(Неопределено);
	КонецЕсли;
	ЭтаФорма.Элементы.site_apimethod.СписокВыбора.Добавить("BTC-E", "BTC-E");
	ЭтаФорма.Элементы.site_apimethod.СписокВыбора.Добавить("Poloniex", "Poloniex");
	ЭтаФорма.Элементы.site_apimethod.СписокВыбора.Добавить("Bittrex", "Bittrex");
	ЭтаФорма.Элементы.site_apimethod.СписокВыбора.Добавить("Yobit", "Yobit");
	ЭтаФорма.Элементы.site_apimethod.СписокВыбора.Добавить("Bitfinex", "Bitfinex");
	ЭтаФорма.Элементы.ТипГрафика.СписокВыбора.Добавить("БиржеваяСвеча", "БиржеваяСвеча");
	ЭтаФорма.Элементы.ТипГрафика.СписокВыбора.Добавить("График", "График");
	ЭтаФорма.Элементы.ТипГрафика.СписокВыбора.Добавить("GoogleCharts", "HTML БиржеваяСвеча");
	ЭтаФорма.Элементы.type.СписокВыбора.Добавить("buy", "Купить");
	ЭтаФорма.Элементы.type.СписокВыбора.Добавить("sell", "Продать");
	ФиксированныйОтбор = Новый ФиксированнаяСтруктура("update_flag", Истина);
	Элементы.АктивныеПары.ОтборСтрок = ФиксированныйОтбор;
	ПодключитьОбработчикОжидания("ОбновитьСписокПарФн", 1, Истина);
	Если Объект.PairUpdate_Period >= 1 Тогда
		ПодключитьОбработчикОжидания("ОбновитьКотировки", Объект.PairUpdate_Period, Ложь);
	КонецЕсли;
	Если Объект.BidAskUpdate_Period >= 1 Тогда
		ПодключитьОбработчикОжидания("ОбновитьОрдера", Объект.BidAskUpdate_Period, Ложь);
	КонецЕсли;
	ОбновитьИндексНастроек();
	ОбновитьИндексПар();
	
	Диаграмма.ОбластьЗаголовка.Текст = "Сделки";
	Диаграмма.ОтображатьЗаголовок = ложь;
	Диаграмма.АвтоУстановкаТекстаТочек = Ложь;
	Диаграмма.СерииВСтроках=ложь;
	Диаграмма.ПалитраЦветов = ПалитраЦветовДиаграммы.Палитра32;
	Диаграмма.ОбластьПостроения.ОтображатьТаблицуДанных = Истина;
	//
	Macd.ОтображатьЗаголовок      = Ложь;
	Macd.АвтоУстановкаТекстаТочек = Ложь;
	Macd.СерииВСтроках            = Ложь;
	//
	ТипГрафикаПриИзменении(Неопределено);
	//
	ПодключитьОбработчикОжидания("ОбновитьТипОрдера", 10, Ложь);
	//
КонецПроцедуры

&НаКлиенте
Процедура PairUpdate_PeriodПриИзменении(Элемент)
	ОтключитьОбработчикОжидания("ОбновитьКотировки");
	ПодключитьОбработчикОжидания("ОбновитьКотировки", Объект.PairUpdate_Period, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура BidAskUpdate_PeriodПриИзменении(Элемент)
	ОтключитьОбработчикОжидания("ОбновитьОрдера");
	ПодключитьОбработчикОжидания("ОбновитьОрдера", Объект.BidAskUpdate_Period, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура site_apiПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьСписокПарФн", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура site_apiПриАктивизацииСтроки(Элемент)
    Данные = Элементы.site_api.ТекущиеДанные;
	Если Данные = Неопределено Тогда
		Если Элементы.pairs.ОтборСтрок <> Неопределено Тогда
		    Элементы.pairs.ОтборСтрок = Неопределено;
		КонецЕсли;
	Иначе
		ФиксированныйОтбор = Новый ФиксированнаяСтруктура("server",Данные.method);
		Элементы.pairs.ОтборСтрок = ФиксированныйОтбор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АктивныеПарыПриАктивизацииСтроки(Элемент)
    Данные = Элементы.АктивныеПары.ТекущиеДанные;
	Если Данные = Неопределено Тогда
		Если Элементы.trades.ОтборСтрок <> Неопределено Тогда
		    Элементы.trades.ОтборСтрок = Неопределено;
		КонецЕсли;
		Если Элементы.orders_ask.ОтборСтрок <> Неопределено Тогда
		    Элементы.orders_ask.ОтборСтрок = Неопределено;
		КонецЕсли;
		Если Элементы.orders_bid.ОтборСтрок <> Неопределено Тогда
		    Элементы.orders_bid.ОтборСтрок = Неопределено;
		КонецЕсли;
	Иначе
		ФиксированныйОтбор = Новый ФиксированнаяСтруктура("server, Pair",Данные.server, Данные.Pair);
		Элементы.trades.ОтборСтрок = ФиксированныйОтбор;
		Элементы.orders_ask.ОтборСтрок = ФиксированныйОтбор;
		Элементы.orders_bid.ОтборСтрок = ФиксированныйОтбор;
		trade_pair = Данные.server + "_" + Данные.Pair;
		Если Объект.ТипГрафика = "БиржеваяСвеча" И Диаграмма.ТипДиаграммы = ТипДиаграммы.БиржеваяСвеча Тогда
			Диаграмма.АктивнаяСерия = Диаграмма.УстановитьСерию(trade_pair);
			//БазовоеЗначение = Данные.low - (Данные.high - Данные.low) / 20;
			Диаграмма.ОсьЗначений.БазовоеЗначение = Данные.chart_low; 
			Диаграмма.ОсьЗначений.МинимальноеЗначение = Данные.chart_low; 
			Диаграмма.ОсьЗначений.МаксимальноеЗначение = Данные.chart_high; 
			Диаграмма.ОсьЗначений.СпособОпределенияМинимальногоЗначения = СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначениеСОграничением;
			Диаграмма.ОсьЗначений.СпособОпределенияМаксимальногоЗначения = СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначениеСОграничением;
		ИначеЕсли Объект.ТипГрафика = "GoogleCharts" И ParentWindow <> Неопределено Тогда
			СтрокиАктивнойПары = НайтиСтроки(Объект.active_pair, Новый Структура("trade_pair", trade_pair));
			Если СтрокиАктивнойПары.Количество() > 0 Тогда
				АктивныеДанные = СтрокиАктивнойПары[0];
				ParentWindow.ChartDataUpdate(АктивныеДанные.json_data, trade_pair);
			КонецЕсли;
		КонецЕсли;
		ОбновитьГрафикиАналитики(trade_pair);
		Объект.server = Данные.server;
		serverПриИзменении(Элементы.server);
		Объект.Pair = Данные.Pair;
		Объект.price = Данные.last;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипГрафикаПриИзменении(Элемент)
	Объект.charts.Очистить();
	Объект.active_pair.Очистить();
	Если Объект.ТипГрафика = "БиржеваяСвеча" И Диаграмма.ТипДиаграммы <> ТипДиаграммы.БиржеваяСвеча Тогда
		Диаграмма.ТипДиаграммы = ТипДиаграммы.БиржеваяСвеча;
		Диаграмма.Очистить();
		Диаграмма.КоличествоСерий = 0;
		Для i = 0 По Объект.КолСвечей * 4 - 1 Цикл
			ТочкаДиаграммы = Диаграмма.УстановитьТочку(i);
		КонецЦикла;
	ИначеЕсли Объект.ТипГрафика = "График" И Диаграмма.ТипДиаграммы <> ТипДиаграммы.График Тогда
		Диаграмма.ТипДиаграммы = ТипДиаграммы.График;
		Диаграмма.Очистить();
		Диаграмма.КоличествоСерий = 0;
		Для i = 0 По Объект.КолСвечей - 1 Цикл
			ТочкаДиаграммы = Диаграмма.УстановитьТочку(i);
		КонецЦикла;
	КонецЕсли;
	Macd.ТипДиаграммы      = ТипДиаграммы.График;
	Macd.РежимСглаживания = РежимСглаживанияДиаграммы.ГладкаяКривая;
	Macd.НатяжениеСглаживания = 95;
	RSI.ТипДиаграммы       = ТипДиаграммы.График;
	RSI.РежимСглаживания = РежимСглаживанияДиаграммы.ГладкаяКривая;
	RSI.НатяжениеСглаживания = 95;
	StochOscillator.ТипДиаграммы = ТипДиаграммы.График;
	StochOscillator.РежимСглаживания = РежимСглаживанияДиаграммы.ГладкаяКривая;
	StochOscillator.НатяжениеСглаживания = 95;
	MacdСерия         = Macd.УстановитьСерию("MACD");
    MacdСерия.Цвет    = Новый Цвет(0, 128, 0);
    SignalСерия       = Macd.УстановитьСерию("Signal");
    SignalСерия.Цвет  = Новый Цвет(255, 102, 0);
    HistСерия       = Macd.УстановитьСерию("Hist");
    HistСерия.Цвет  = Новый Цвет(153, 204, 0);
    RSIСерия              = RSI.УстановитьСерию("RSI");
    RSIСерия2              = RSI.УстановитьСерию("RSI2");
    OverSoldСерия         = RSI.УстановитьСерию("OverSold");
    OverboughtСерия       = RSI.УстановитьСерию("Overbought");
	OverboughtСерия.Цвет  = Новый Цвет(255, 0, 0);
    OverSoldСерия.Цвет    = Новый Цвет(153, 204, 0);
    RSIСерия.Цвет         = Новый Цвет(0, 0, 255);
	RSIСерия.Линия        = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
    RSIСерия2.Цвет         = Новый Цвет(255, 102, 0);
	RSIСерия2.Линия        = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
    OverSoldСерия.Линия   = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	OverboughtСерия.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	MacdСерия.Линия   = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
    SignalСерия.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	FastStochСерия       = StochOscillator.УстановитьСерию("FastStoch");
    SlowStochСерия       = StochOscillator.УстановитьСерию("SlowStoch");
    FastStochСерия.Цвет  = Новый Цвет(0, 128, 0);
    SlowStochСерия.Цвет  = Новый Цвет(255, 102, 0);
	FastStochСерия.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
    SlowStochСерия.Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
	
	Macd.Очистить();
	Macd.КоличествоСерий = 0;
	Для i = 0 По Объект.КолСвечей - 1 Цикл
		ТочкаДиаграммы = Macd.УстановитьТочку(i);
	КонецЦикла;
	RSI.ТипДиаграммы = ТипДиаграммы.График;
	RSI.Очистить();
	RSI.КоличествоСерий = 0;
	Для i = 0 По Объект.КолСвечей - 1 Цикл
		ТочкаДиаграммы = RSI.УстановитьТочку(i);
	КонецЦикла;
	StochOscillator.Очистить();
	StochOscillator.КоличествоСерий = 0;
	Для i = 0 По Объект.КолСвечей - 1 Цикл
		ТочкаДиаграммы = StochOscillator.УстановитьТочку(i);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ДобавитьСтрокуВТабЧасть(СтрокаТЧ, Поля, ЗначенияПолей, УникальныйИндекс = Истина)
	//ТабЧасть = Объект[ИмяТабЧасти];
	//СтрокаТЧ = ТабЧасть.Добавить();
	//ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
	ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
	СохранитьИндекс(Поля, ЗначенияПолей, ИдентификаторСтроки, УникальныйИндекс);
	//СохранитьИндекс(ИмяТабЧасти + "_" + ПолеПоиска, ЗначениеПоиска, ИдентификаторСтроки, Ложь);
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция СохранитьИндекс(ИмяИндекса, ЗначениеИндекса, ИдентификаторСтроки, Уникальный = Истина)
	НовыйИндекс = Ложь;
	Индекс = ИндексыТабличныхЧастей.Получить(ИмяИндекса);
	Если Индекс = Неопределено Тогда
		Индекс = Новый Соответствие;
		НовыйИндекс = Истина;
	КонецЕсли;
	Если Уникальный = Истина Тогда
		Индекс.Вставить(ЗначениеИндекса, ИдентификаторСтроки);
	Иначе
		МассивСтрок = Индекс.Получить(ЗначениеИндекса);
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = Новый Массив;
			НовыйИндекс = Истина;
		КонецЕсли;
		МассивСтрок.Добавить(ИдентификаторСтроки);
		Индекс.Вставить(ЗначениеИндекса, МассивСтрок);
	КонецЕсли;
	ИндексыТабличныхЧастей.Вставить(ИмяИндекса, Индекс);
	Возврат НовыйИндекс;
КонецФункции

&НаКлиенте
Функция НайтиСтрокуИзТабЧасти(ИмяТабЧасти, ПоляПоиска, ЗначениеПоиска, ПолеУникальныхСтрок = "")
	Индекс = ИндексыТабличныхЧастей.Получить(ИмяТабЧасти + "_" + ПоляПоиска);
	Если Индекс = Неопределено Тогда
		Индекс = Новый Соответствие;
	КонецЕсли;
	ИдентификаторСтроки = Индекс.Получить(ЗначениеПоиска);
	ТабЧасть = Объект[ИмяТабЧасти];
	Если ТипЗнч(ИдентификаторСтроки) = Тип("Число") Тогда
		СтрокаТЧ = ТабЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		Возврат СтрокаТЧ;
	ИначеЕсли ТипЗнч(ИдентификаторСтроки) = Тип("Массив") Тогда
		Строки = Новый Соответствие;
		Для Каждого ИдентификаторСтроки Из ИдентификаторСтроки Цикл
			СтрокаТЧ = ТабЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
			Строки.Вставить(СтрокаТЧ[ПолеУникальныхСтрок], ИдентификаторСтроки);
		КонецЦикла;
		Возврат Строки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокиСервера(ИндексыСтрок, method)
	СтрокиПарСервера = Новый Соответствие;
	Если ИндексыСтрок <> Неопределено Тогда
		ДлинаМетода = СтрДлина(method);
		Для Каждого Индекс Из ИндексыСтрок Цикл
			Если Лев(Индекс.Ключ, ДлинаМетода) = method Тогда
				СтрокиПарСервера.Вставить(Индекс.Ключ, Индекс.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СтрокиПарСервера;
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокиТЧ(ИмяТабЧасти, ИндексыСтрок, УдаляемыеСтроки, КлючИндекса)
	Если УдаляемыеСтроки <> Неопределено И ИндексыСтрок <> Неопределено Тогда
		ИндексИзменен = Ложь;
		ТабЧасть = Объект[ИмяТабЧасти];
		Для Каждого Элемент Из УдаляемыеСтроки Цикл
			СтрокаТЧ = ТабЧасть.НайтиПоИдентификатору(Элемент.Значение);
			ТабЧасть.Удалить(СтрокаТЧ);
			ИндексыСтрок.Удалить(Элемент.Ключ);
			ИндексИзменен = Истина;
		КонецЦикла;
		Если ИндексИзменен Тогда
			ИндексыТабличныхЧастей.Вставить(КлючИндекса, ИндексыСтрок);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИндексНастроек()
	ТабЧасть = Объект.site_api;
	Для Каждого СтрокаТЧ Из ТабЧасть Цикл
		ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
		СохранитьИндекс("site_api_method", СтрокаТЧ.method, ИдентификаторСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИндексПар()
	ТабЧасть = Объект.pairs;
	Для Каждого СтрокаТЧ Из ТабЧасть Цикл
		ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
		СохранитьИндекс("pairs_server_Pair", СтрокаТЧ.server + "_" + СтрокаТЧ.Pair, ИдентификаторСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДату(СтроковаяДата, method)
	Результат = Неопределено;
	Если method = "Bittrex" Тогда
		ВрСтр = СтрЗаменить(СтроковаяДата, "T", "");
		ВрСтр = СтрЗаменить(ВрСтр, ":", "");
		ВрСтр = СтрЗаменить(ВрСтр, "-", "");
		ПозТоч = СтрНайти(ВрСтр, ".");
		Если ПозТоч > 0 Тогда
			ВрСтр = Лев(ВрСтр, ПозТоч-1);
		КонецЕсли;
	ИначеЕсли method = "Poloniex" Тогда
		ВрСтр = СтрЗаменить(СтроковаяДата , "-","");
		ВрСтр = СтрЗаменить(ВрСтр , ":","");
		ВрСтр = СтрЗаменить(ВрСтр , " ","");
	ИначеЕсли method = "BTC-E" Или method = "Yobit" Тогда 
		ВрСтр = Дата(1970,1,1,1,0,0) + СтроковаяДата;
	ИначеЕсли method = "Bitfinex" Тогда
		ВрСтр = Дата("19700101000000") + СтроковаяДата/1000;
	КонецЕсли;
	Результат = Дата(ВрСтр) + ЧасовойПояс * 60 * 60;
	Возврат Результат;
КонецФункции
&НаКлиенте
Процедура ОбновитьСписокПарФн()
	Перем ВремяСервера;
	ОбновитьИндексНастроек();
	ИндексыСтрок = ИндексыТабличныхЧастей.Получить("pairs_server_Pair");
	//Информация о торговых парах
	Для Каждого НастройкаСервера Из Объект.site_api Цикл
		Если Не ЗначениеЗаполнено(НастройкаСервера.method) Или НастройкаСервера.update_flag = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_info);
		НастройкаСервера.server_time = ПолучитьВремяСервера(НастройкаСервера.method, Ответ);
		СтрокиПарСервера = ПолучитьСтрокиСервера(ИндексыСтрок, НастройкаСервера.method);
		ОтветСписком = ПолучитьСписокПар(НастройкаСервера.method, Ответ);
		Для Каждого Pair Из ОтветСписком Цикл
			СтруктураДанных = ПолучитьСтруктуруКотировок(НастройкаСервера.method, Pair);
			Если СтруктураДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ИмяПары = ПолучитьИмяПары(НастройкаСервера.method, Pair);
			server_Pair = НастройкаСервера.method + "_" + ИмяПары;
			СтрокаТЧ = НайтиСтрокуИзТабЧасти("pairs", "server_Pair", server_Pair);
			Если СтрокаТЧ = Неопределено Тогда
				СтрокаТЧ = Объект.pairs.Добавить();
				ДобавитьСтрокуВТабЧасть(СтрокаТЧ, "pairs_server_Pair", server_Pair);
				СтрокаТЧ.server = НастройкаСервера.method;
				СтрокаТЧ.Pair = ИмяПары;
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
				//СтрокаТЧ.decimal_places = Pair.Значение.Получить("decimal_places");
			Иначе
				Если СтрокиПарСервера.Получить(server_Pair) <> Неопределено Тогда
					СтрокиПарСервера.Удалить(server_Pair);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		УдалитьСтрокиТЧ("pairs", ИндексыСтрок, СтрокиПарСервера, "pairs_server_Pair");
		Если ЭтаФорма.Элементы.server.СписокВыбора.НайтиПоЗначению(НастройкаСервера.method) = Неопределено Тогда
			ЭтаФорма.Элементы.server.СписокВыбора.Добавить(НастройкаСервера.method);
		КонецЕсли;
	КонецЦикла;
	ПодключитьОбработчикОжидания("ОбновитьБалансы", 1, Истина);
	ПодключитьОбработчикОжидания("ОбновитьСвоиОрдера", 2, Истина);
	ПодключитьОбработчикОжидания("ОбновитьИсториюОрдеров", 3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура serverПриИзменении(Элемент)
	ЭтаФорма.Элементы.Pair.СписокВыбора.Очистить();
	Для Каждого СтрокаТЧ Из Объект.pairs Цикл
		Если СтрокаТЧ.update_flag И СтрокаТЧ.server = Объект.server Тогда
			ЭтаФорма.Элементы.Pair.СписокВыбора.Добавить(СтрокаТЧ.Pair);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБалансы()
	Перем ВремяСервера;
	//ОбновитьИндексНастроек();
	//ИндексыСтрок = ИндексыТабличныхЧастей.Получить("pairs_server_Pair");
	//Информация о торговых парах
	Для Каждого НастройкаСервера Из Объект.site_api Цикл
		Если Не ЗначениеЗаполнено(НастройкаСервера.method) Или НастройкаСервера.update_flag = Ложь Или ПустаяСтрока(НастройкаСервера.apikey) Тогда
			Продолжить;
		КонецЕсли;
		//Запрос балансов
		Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_balance, Неопределено, НастройкаСервера.apikey, НастройкаСервера.apisecret, НастройкаСервера.method);
		ОтветСписком = ПолучитьСписокБалансов(НастройкаСервера.method, Ответ);
		Если ОтветСписком = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Pair Из ОтветСписком Цикл
			СтруктураДанных = ПолучитьСтруктуруБаланса(НастройкаСервера.method, Pair);
			Если СтруктураДанных = Неопределено Или СтруктураДанных.Balance = 0 Тогда
				Продолжить;
			КонецЕсли;
			ИмяВалюты = ПолучитьИмяВалюты(НастройкаСервера.method, Pair);
			СтруктураПоиска = Новый Структура("server, Currency", НастройкаСервера.method, ИмяВалюты);
			СтрокиТЧ = НайтиСтроки(Объект.balances, СтруктураПоиска);
			Если СтрокиТЧ.Количество() = 0 Тогда
				СтрокаТЧ = Объект.balances.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураПоиска);
			Иначе
				СтрокаТЧ = СтрокиТЧ[0];
			КонецЕсли;
			СтрокаТЧ.value = СтруктураДанных.Balance;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвоиОрдера()
	Перем ВремяСервера;
	//ОбновитьИндексНастроек();
	//ИндексыСтрок = ИндексыТабличныхЧастей.Получить("pairs_server_Pair");
	//Информация о торговых парах
	Для Каждого НастройкаСервера Из Объект.site_api Цикл
		Если Не ЗначениеЗаполнено(НастройкаСервера.method) Или НастройкаСервера.update_flag = Ложь Или ПустаяСтрока(НастройкаСервера.apikey) Тогда
			Продолжить;
		КонецЕсли;
		//Запрос своих открытых ордеров
		Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_own_orders, Неопределено, НастройкаСервера.apikey, НастройкаСервера.apisecret, НастройкаСервера.method);
		ОтветСписком = ПолучитьСписокСвоихОрдеров(НастройкаСервера.method, Ответ);
		Если ОтветСписком = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Pair Из ОтветСписком Цикл
			Если ТипЗнч(Pair) = Тип("КлючИЗначение") И ТипЗнч(Pair.Значение) = Тип("Массив") Тогда
				Для Каждого ЭлементОрдера Из Pair.Значение Цикл
					СтруктураДанных = ПолучитьСтруктуруОрдера(НастройкаСервера.method, ЭлементОрдера, Pair);
					Если СтруктураДанных = Неопределено Или СтруктураДанных.tid = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтруктураПоиска = Новый Структура("server, tid", НастройкаСервера.method, СтруктураДанных.tid);
					СтрокиТЧ = НайтиСтроки(Объект.orders, СтруктураПоиска);
					Если СтрокиТЧ.Количество() = 0 Тогда
						СтрокаТЧ = Объект.orders.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураПоиска);
					Иначе
						СтрокаТЧ = СтрокиТЧ[0];
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
				КонецЦикла;
			Иначе
				СтруктураДанных = ПолучитьСтруктуруОрдера(НастройкаСервера.method, Pair);
				Если СтруктураДанных = Неопределено Или СтруктураДанных.tid = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтруктураПоиска = Новый Структура("server, tid", НастройкаСервера.method, СтруктураДанных.tid);
				СтрокиТЧ = НайтиСтроки(Объект.orders, СтруктураПоиска);
				Если СтрокиТЧ.Количество() = 0 Тогда
					СтрокаТЧ = Объект.orders.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураПоиска);
				Иначе
					СтрокаТЧ = СтрокиТЧ[0];
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюОрдеров()
	Перем ВремяСервера;
	//ОбновитьИндексНастроек();
	//ИндексыСтрок = ИндексыТабличныхЧастей.Получить("pairs_server_Pair");
	//Информация о торговых парах
	Для Каждого НастройкаСервера Из Объект.site_api Цикл
		Если Не ЗначениеЗаполнено(НастройкаСервера.method) Или НастройкаСервера.update_flag = Ложь Или ПустаяСтрока(НастройкаСервера.apikey) Тогда
			Продолжить;
		КонецЕсли;
		//Запрос своих открытых ордеров
		start_date = Формат(УниверсальноеВремя(ДобавитьМесяц(ТекущаяДата(),-6)) - дата(1970,1,1,1,0,0), "ЧГ=0");   
		ПараметрыЗапроса = Новый Соответствие;
		ПараметрыЗапроса.Вставить("start", start_date);
		Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_orderhistory, ПараметрыЗапроса, НастройкаСервера.apikey, НастройкаСервера.apisecret, НастройкаСервера.method);
		ОтветСписком = ПолучитьСписокСвоихОрдеров(НастройкаСервера.method, Ответ);
		Если ОтветСписком = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Pair Из ОтветСписком Цикл
			Если ТипЗнч(Pair) = Тип("КлючИЗначение") И ТипЗнч(Pair.Значение) = Тип("Массив") Тогда
				Для Каждого ЭлементОрдера Из Pair.Значение Цикл
					СтруктураДанных = ПолучитьСтруктуруОрдера(НастройкаСервера.method, ЭлементОрдера, Pair);
					Если СтруктураДанных = Неопределено Или СтруктураДанных.tid = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтруктураПоиска = Новый Структура("server, tid", НастройкаСервера.method, СтруктураДанных.tid);
					СтрокиТЧ = НайтиСтроки(Объект.orderhistory, СтруктураПоиска);
					Если СтрокиТЧ.Количество() = 0 Тогда
						СтрокаТЧ = Объект.orderhistory.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураПоиска);
					Иначе
						СтрокаТЧ = СтрокиТЧ[0];
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
				КонецЦикла;
			Иначе
				СтруктураДанных = ПолучитьСтруктуруОрдера(НастройкаСервера.method, Pair);
				Если СтруктураДанных = Неопределено Или СтруктураДанных.tid = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтруктураПоиска = Новый Структура("server, tid", НастройкаСервера.method, СтруктураДанных.tid);
				СтрокиТЧ = НайтиСтроки(Объект.orderhistory, СтруктураПоиска);
				Если СтрокиТЧ.Количество() = 0 Тогда
					СтрокаТЧ = Объект.orderhistory.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураПоиска);
				Иначе
					СтрокаТЧ = СтрокиТЧ[0];
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция hash_hmac_sha512(Строка, СекретныйКлюч)
//	Текст = Новый COMОбъект("System.Text.UTF8Encoding");
//	КриптоSHA512 = Новый COMОбъект("System.Security.Cryptography.SHA512Managed");
//	Хэш = КриптоSHA512.ComputeHash_2(Текст.GetBytes_4(СтрОб)).Выгрузить();
//	Возврат Хэш;
    Текст = Новый COMОбъект("System.Text.UTF8Encoding");
    Криптография = Новый COMОбъект("System.Security.Cryptography.HMACSHA512");
    Криптография.Key = Текст.GetBytes_4(СекретныйКлюч);
    ХешБайт = Криптография.ComputeHash_2(Текст.GetBytes_4(Строка)).Выгрузить();
	Хеш = ConvToHexString(ХешБайт);
    Возврат Хеш;
КонецФункции

&НаКлиенте
Функция hash_hmac_sha384(Строка, СекретныйКлюч, base64 = Ложь)
    Текст = Новый COMОбъект("System.Text.UTF8Encoding");
    Криптография = Новый COMОбъект("System.Security.Cryptography.HMACSHA384");
    Криптография.Key = Текст.GetBytes_4(СекретныйКлюч);
	Если base64 Тогда
    	ТекстASCII = Новый COMОбъект("System.Text.ASCIIEncoding");
		ХешБайт = Криптография.ComputeHash_2(ТекстASCII.GetBytes_4(Строка)).Выгрузить();
	Иначе
    	ХешБайт = Криптография.ComputeHash_2(Текст.GetBytes_4(Строка)).Выгрузить();
	КонецЕсли;
	Хеш = ConvToHexString(ХешБайт);
    Возврат Хеш;
КонецФункции

Функция ConvToHexString(ХешБайт)

    Соотв16 = Новый Соответствие;
    Соотв16.Вставить(0 , "0");
    Соотв16.Вставить(1 , "1");
    Соотв16.Вставить(2 , "2");
    Соотв16.Вставить(3 , "3");
    Соотв16.Вставить(4 , "4");
    Соотв16.Вставить(5 , "5");
    Соотв16.Вставить(6 , "6");
    Соотв16.Вставить(7 , "7");
    Соотв16.Вставить(8 , "8");
    Соотв16.Вставить(9 , "9");
    Соотв16.Вставить(10, "a");
    Соотв16.Вставить(11, "b");
    Соотв16.Вставить(12, "c");
    Соотв16.Вставить(13, "d");
    Соотв16.Вставить(14, "e");
    Соотв16.Вставить(15, "f");
	
    Хеш = "";
    Для Каждого Байт Из ХешБайт Цикл
        Чс = Цел(Байт/16);
        Хеш = Хеш + Прав("0" + Соотв16.Получить(Чс) + Соотв16.Получить(Байт-Чс*16), 2);
    КонецЦикла;
	
    Возврат Хеш;

КонецФункции
	
&НаКлиенте
Функция DecToAny(Знач тЗначение, тОснование)
   тРезультат = "";
 
   Пока тЗначение > 0 Цикл
      тРезультат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", тЗначение%тОснование + 1, 1) + тРезультат;
      тЗначение = Цел(тЗначение/тОснование) ;
   КонецЦикла;
 
   Возврат тРезультат;
КонецФункции

&НаКлиенте
Процедура ПолучитьСтрокуОтбора(method, СтрокаОтбора, СтрокаПары, ФормироватьСтроку = Истина)
	Если Не ЗначениеЗаполнено(СтрокаОтбора) Тогда
		Если method = "BTC-E" Тогда
			СтрокаОтбора = "/";
		//ИначеЕсли method = "Poloniex" Тогда
		//	СтрокаОтбора = "";
		ИначеЕсли method = "Yobit" Тогда
			СтрокаОтбора = "/";
		ИначеЕсли method = "Bitfinex" И ФормироватьСтроку Тогда
			СтрокаОтбора = "?symbols=";
		Иначе
			СтрокаОтбора = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	Если method = "BTC-E" Тогда
		СтрокаОтбора = СтрокаОтбора + СтрокаПары + "-";
	//ИначеЕсли method = "Poloniex" Тогда
	//	СтрокаОтбора = "";
	ИначеЕсли method = "Yobit" Тогда
		СтрокаОтбора = СтрокаОтбора + СтрокаПары + "-";
	ИначеЕсли method = "Bitfinex" И ФормироватьСтроку Тогда
		СтрокаОтбора = СтрокаОтбора + СтрокаПары + ",";
	Иначе
		СтрокаОтбора.Добавить(СтрокаПары);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКотировки()
	СоответствиеЗапросов = Новый Соответствие;
	Для Каждого СтрокаПары Из Объект.pairs Цикл
		Если Не ЗначениеЗаполнено(СтрокаПары.server) Или СтрокаПары.update_flag = Ложь Тогда
			Продолжить;
		КонецЕсли;
		СтрокаОтбора = СоответствиеЗапросов.Получить(СтрокаПары.server);
		ПолучитьСтрокуОтбора(СтрокаПары.server, СтрокаОтбора, СтрокаПары.Pair);
		СоответствиеЗапросов.Вставить(СтрокаПары.server, СтрокаОтбора);
	КонецЦикла;
	Для Каждого ЗапросКСайту Из СоответствиеЗапросов Цикл
		НастройкаСервера = НайтиСтрокуИзТабЧасти("site_api", "method", ЗапросКСайту.Ключ);
		Если ТипЗнч(ЗапросКСайту.Значение) = Тип("Строка") Или ЗапросКСайту.Ключ = "Poloniex" Тогда
			Если ТипЗнч(ЗапросКСайту.Значение) = Тип("Строка") Тогда
				СтрокаОтбора = ЗапросКСайту.Значение;
			Иначе
				СтрокаОтбора = "";
			КонецЕсли;
			ДлСтр = СтрДлина(СтрокаОтбора);
			Если ДлСтр > 1 Тогда
				СтрокаОтбора = Лев(СтрокаОтбора, ДлСтр - 1);
			КонецЕсли;
			//Запрос котировок
			ОтветTicker = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_ticker + СтрокаОтбора);
			СписокКотировок = ПолучитьСписокКотировок(НастройкаСервера.method, ОтветTicker);
			Если СписокКотировок = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого Pair Из СписокКотировок Цикл
				ИмяПары = ПолучитьИмяПары(НастройкаСервера.method, Pair);
				server_Pair = НастройкаСервера.method + "_" + ИмяПары;
				СтрокаТЧ = НайтиСтрокуИзТабЧасти("pairs", "server_Pair", server_Pair);
				Если СтрокаТЧ <> Неопределено Тогда
					СтруктураДанных = ПолучитьСтруктуруКотировок(НастройкаСервера.method, Pair);
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ЗапросКСайту.Значение) = Тип("Массив") Тогда
			Для Каждого ТорговаяПара Из ЗапросКСайту.Значение Цикл
				//Запрос котировок
				ОтветTicker = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_ticker + ТорговаяПара);
				СписокКотировок = ПолучитьСписокКотировок(НастройкаСервера.method, ОтветTicker);
				Если ТипЗнч(СписокКотировок) = Тип("Соответствие") Тогда
					СписокМассив = Новый Массив;
					СписокМассив.Добавить(СписокКотировок);
					СписокКотировок = СписокМассив;
				ИначеЕсли СписокКотировок = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого Pair Из СписокКотировок Цикл
					ИмяПары = ПолучитьИмяПары(НастройкаСервера.method, Pair);
					server_Pair = НастройкаСервера.method + "_" + ИмяПары;
					СтрокаТЧ = НайтиСтрокуИзТабЧасти("pairs", "server_Pair", server_Pair);
					Если СтрокаТЧ <> Неопределено Тогда
						СтруктураДанных = ПолучитьСтруктуруКотировок(НастройкаСервера.method, Pair);
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьИмяПары(method, Pair)
	Если method = "BTC-E" Тогда
		Возврат Pair.Ключ;
	ИначеЕсли method = "Poloniex" Тогда
		Возврат Pair.Ключ;
	ИначеЕсли method = "Bittrex" Тогда
		Market = Pair.Получить("Market");
		Если Market = Неопределено Тогда
			Market = Pair;
		КонецЕсли;
		Возврат Market.Получить("MarketName");
	ИначеЕсли method = "Yobit" Тогда
		Возврат Pair.Ключ;
	ИначеЕсли method = "Bitfinex" Тогда
		Если ТипЗнч(Pair) = Тип("Строка") Тогда
			Возврат Pair;
		ИначеЕсли ТипЗнч(Pair) = Тип("Массив") Тогда
			Возврат Pair[0];
		Иначе
			Возврат "t" + ВРег(Pair.Получить("pair"));
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьИмяВалюты(method, Pair)
	Если method = "BTC-E" Тогда
		Возврат Pair.Ключ;
	ИначеЕсли method = "Poloniex" Тогда
		Возврат Pair.Ключ;
	ИначеЕсли method = "Bittrex" Тогда
		Если ТипЗнч(Pair.Получить("Currency")) = Тип("Соответствие") Тогда
			Возврат Pair.Получить("Currency").Получить("Currency");
		Иначе
			Возврат Pair.Получить("Currency");
		КонецЕсли;
	ИначеЕсли method = "Yobit" Тогда
		Возврат Pair.Ключ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруКотировок(method, Pair)
	СтруктураДанных = Новый Структура("last, buy, sell, high, low, avg, vol, vol_cur, updated, decimal_places");
	Если method = "BTC-E" Тогда
		Для Каждого Элемент Из Pair.Значение Цикл
			Если СтруктураДанных.Свойство(Элемент.Ключ) Тогда
				СтруктураДанных[Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
		updated = Pair.Значение.Получить("updated");
		Если ТипЗнч(updated) = Тип("Число") Тогда
			СтруктураДанных.updated = Дата("19700101000000") + Pair.Значение.Получить("updated");
		КонецЕсли;
	ИначеЕсли method = "Poloniex" Тогда
		Если ТипЗнч(Pair.Значение) = Тип("Соответствие") Тогда
			СтруктураДанных.high = Pair.Значение.Получить("high24hr");
			СтруктураДанных.low = Pair.Значение.Получить("low24hr");
			СтруктураДанных.last = Pair.Значение.Получить("last");
			СтруктураДанных.vol = Pair.Значение.Получить("baseVolume");
			СтруктураДанных.vol_cur = Pair.Значение.Получить("quoteVolume");
			СтруктураДанных.buy = Pair.Значение.Получить("lowestAsk");
			СтруктураДанных.sell = Pair.Значение.Получить("highestBid");
		Иначе
			СтруктураДанных = Неопределено;
		КонецЕсли;
	ИначеЕсли method = "Bittrex" Тогда
		Summary = Pair.Получить("Summary");
		Если Summary = Неопределено Тогда
			Summary = Pair;
		КонецЕсли;
		СтруктураДанных.high = Summary.Получить("High");
		СтруктураДанных.low = Summary.Получить("Low");
		СтруктураДанных.last = Summary.Получить("Last");
		СтруктураДанных.vol = Summary.Получить("BaseVolume");
		СтруктураДанных.buy = Summary.Получить("Ask");
		СтруктураДанных.sell = Summary.Получить("Bid");
		ВрСтр = СтрЗаменить(Summary.Получить("TimeStamp"), "T", "");
		ВрСтр = СтрЗаменить(ВрСтр, ":", "");
		ВрСтр = СтрЗаменить(ВрСтр, "-", "");
		ПозТоч = СтрНайти(ВрСтр, ".");
		Если ПозТоч > 0 Тогда
			ВрСтр = Лев(ВрСтр, ПозТоч-1);
		КонецЕсли;
		СтруктураДанных.updated = Дата(ВрСтр);
	ИначеЕсли method = "Yobit" Тогда
		Для Каждого Элемент Из Pair.Значение Цикл
			Если СтруктураДанных.Свойство(Элемент.Ключ) Тогда
				СтруктураДанных[Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
		updated = Pair.Значение.Получить("updated");
		Если ТипЗнч(updated) = Тип("Число") Тогда
			СтруктураДанных.updated = Дата("19700101000000") + Pair.Значение.Получить("updated");
		КонецЕсли;
	ИначеЕсли method = "Bitfinex" Тогда
		Если ТипЗнч(Pair) = Тип("Соответствие") Тогда
			СтруктураДанных.decimal_places = Pair.Получить("price_precision");
		ИначеЕсли ТипЗнч(Pair) = Тип("Массив") Тогда
			//BID, 
			//BID_SIZE, 
			//ASK, 
			//ASK_SIZE, 
			//DAILY_CHANGE, 
			//DAILY_CHANGE_PERC, 
			//LAST_PRICE, 
			//VOLUME, 
			//HIGH, 
			//LOW			
			СтруктураДанных.high = Pair[9];
			СтруктураДанных.low = Pair[10];
			СтруктураДанных.last = Pair[7];
			СтруктураДанных.vol = Pair[8];
			СтруктураДанных.buy = Pair[1];
			СтруктураДанных.sell = Pair[3];
		Иначе
			СтруктураДанных = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанных;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруБаланса(method, Pair)
	СтруктураДанных = Новый Структура("Pending, Currency, Available, Balance, CryptoAddress");
	Если method = "BTC-E" Или method = "Yobit" Или method = "Poloniex" Тогда
		Если Pair.Ключ = "error" Тогда
			СтруктураДанных.Currency = Pair.Ключ;
		Иначе
			СтруктураДанных.Currency = Pair.Ключ;
			СтруктураДанных.Balance = Число(Pair.Значение);
		КонецЕсли;
	ИначеЕсли method = "Bittrex" Тогда
		Currency = Pair.Получить("Currency");
		Если ТипЗнч(Currency) = Тип("Соответствие") Тогда
			СтруктураДанных.Currency = Currency.Получить("Currency");
		Иначе
			СтруктураДанных.Currency = Pair.Получить("Currency");
		КонецЕсли;
		Balance = Pair.Получить("Balance");
		Если ТипЗнч(Balance) = Тип("Соответствие") Тогда
			СтруктураДанных.CryptoAddress = Balance.Получить("CryptoAddress");
			СтруктураДанных.Available = Balance.Получить("Available");
			СтруктураДанных.Pending = Balance.Получить("Pending");
			СтруктураДанных.Balance = Число(Balance.Получить("Balance"));
		Иначе
			СтруктураДанных.CryptoAddress = Pair.Получить("CryptoAddress");
			СтруктураДанных.Available = Pair.Получить("Available");
			СтруктураДанных.Pending = Pair.Получить("Pending");
			СтруктураДанных.Balance = Число(Pair.Получить("Balance"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанных;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруОрдера(method, Pair, Opt = Неопределено)
	Если ТипЗнч(Pair) = Тип("КлючИЗначение") И Pair.Ключ = "error" Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтруктураДанных = Новый Структура("tid, pair, type, amount, price, timestamp");
	Если method = "BTC-E" Или method = "Yobit" Тогда 
		СтруктураДанных.tid = Pair.Ключ;
		СтруктураДанных.pair = Pair.Значение.Получить("pair");
		СтруктураДанных.type = Pair.Значение.Получить("type");
		СтруктураДанных.amount = Pair.Значение.Получить("amount");
		СтруктураДанных.price = Pair.Значение.Получить("rate");
		СтруктураДанных.timestamp = ПолучитьДату(Pair.Значение.Получить("timestamp_created"), method);
	ИначеЕсли method = "Poloniex" Тогда
		СтруктураДанных.tid = Pair.Получить("TradeID");
		СтруктураДанных.pair = Opt.Ключ;
		СтруктураДанных.type = Pair.Получить("type");
		СтруктураДанных.amount = Pair.Получить("amount");
		СтруктураДанных.price = Pair.Получить("rate");
		СтруктураДанных.timestamp = ПолучитьДату(Pair.Получить("date"), method);
	ИначеЕсли method = "Bittrex" Тогда
		СтруктураДанных.tid = Pair.Получить("OrderUuid");
		СтруктураДанных.pair = Pair.Получить("Exchange");
		СтруктураДанных.type = Pair.Получить("OrderType");
		СтруктураДанных.amount = Pair.Получить("Quantity");
		СтруктураДанных.price = Pair.Получить("Limit");
		timestamp = Pair.Получить("Closed");
		Если timestamp = Неопределено Тогда
			timestamp = Pair.Получить("TimeStamp");
		КонецЕсли;
		Если timestamp = Неопределено Тогда
			timestamp = Pair.Получить("Opened");
		КонецЕсли;
		СтруктураДанных.timestamp = ПолучитьДату(timestamp, method);
	КонецЕсли;
	
	Возврат СтруктураДанных;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокКотировок(method, ОтветСервера)
	Если ОтветСервера = Ложь Тогда
		Возврат Неопределено;
	ИначеЕсли method = "BTC-E" Тогда
		Возврат ОтветСервера;
	ИначеЕсли method = "Poloniex" Тогда
		Возврат ОтветСервера;
	ИначеЕсли method = "Bittrex" Тогда
		Если ОтветСервера.Получить("success") = Ложь Тогда
			Возврат Неопределено;
		Иначе
			Возврат ОтветСервера.Получить("result");
		КонецЕсли;
	ИначеЕсли method = "Yobit" Тогда
		Возврат ОтветСервера;
	ИначеЕсли method = "Bitfinex" Тогда
		Возврат ОтветСервера;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокБалансов(method, ОтветСервера)
	Если ОтветСервера = Ложь Тогда
		Возврат Неопределено;
	ИначеЕсли method = "BTC-E" Или method = "Yobit" Тогда
		Если ОтветСервера.Получить("success") = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат ОтветСервера.Получить("return").Получить("funds");
		КонецЕсли;
	ИначеЕсли method = "Poloniex" Тогда
		Возврат ОтветСервера;
	ИначеЕсли method = "Bittrex" Тогда
		Если ОтветСервера.Получить("success") = Ложь Тогда
			Возврат Неопределено;
		Иначе
			Возврат ОтветСервера.Получить("result");
		КонецЕсли;
	ИначеЕсли method = "Bitfinex" Тогда
		Возврат ОтветСервера;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСвоихОрдеров(method, ОтветСервера)
	Если ОтветСервера = Неопределено Или ОтветСервера = Ложь Тогда
		Возврат Неопределено;
	ИначеЕсли method = "BTC-E" Или method = "Yobit" Тогда
		Если ОтветСервера.Получить("success") = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат ОтветСервера.Получить("return");
		КонецЕсли;
	ИначеЕсли method = "Poloniex" Тогда
		Возврат ОтветСервера;
	ИначеЕсли method = "Bittrex" Тогда
		Если ОтветСервера.Получить("success") = Ложь Тогда
			Возврат Неопределено;
		Иначе
			Возврат ОтветСервера.Получить("result");
		КонецЕсли;
	ИначеЕсли method = "Bitfinex" Тогда
		Возврат ОтветСервера;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокПар(method, ОтветСервера)
	Если ОтветСервера = Ложь Тогда
		Возврат Неопределено;
	ИначеЕсли method = "BTC-E" Тогда
		Возврат ОтветСервера.Получить("pairs");
	ИначеЕсли method = "Poloniex" Тогда
		Возврат ОтветСервера;
	ИначеЕсли method = "Bitfinex" Тогда
		Возврат ОтветСервера;
	ИначеЕсли method = "Bittrex" Тогда
		Если ОтветСервера.Получить("success") = Ложь Тогда
			Возврат Неопределено;
		Иначе
			Возврат ОтветСервера.Получить("result");
		КонецЕсли;
	ИначеЕсли method = "Yobit" Тогда
		Возврат ОтветСервера.Получить("pairs");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьВремяСервера(method, ОтветСервера)
	server_time = ТекущаяДата();
	Если method = "BTC-E" Тогда
		ВремяСервера = ОтветСервера.Получить("server_time");
		Если ЗначениеЗаполнено(ВремяСервера) Тогда
			server_time = Дата("19700101000000") + ВремяСервера;
		КонецЕсли;
	КонецЕсли;
	Возврат server_time;
КонецФункции

&НаКлиенте
Функция ПолучитьВремяСделки(method, Сделка)
	server_time = Неопределено;
	Если method = "BTC-E" Тогда
		server_time = Дата("19700101000000") + ЧасовойПояс*60*60 + Сделка.Получить("timestamp");
	ИначеЕсли method = "Poloniex" Тогда
		СтроковаяДата = Сделка.Получить("date");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , "-","");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , ":","");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , " ","");
		server_time = Дата(СтроковаяДата) + ЧасовойПояс * 60 * 60;
	ИначеЕсли method = "Bittrex" Тогда
		СтроковаяДата = Сделка.Получить("TimeStamp");
		ВрСтр = СтрЗаменить(СтроковаяДата, "T", "");
		ВрСтр = СтрЗаменить(ВрСтр, ":", "");
		ВрСтр = СтрЗаменить(ВрСтр, "-", "");
		ПозТоч = СтрНайти(ВрСтр, ".");
		Если ПозТоч > 0 Тогда
			ВрСтр = Лев(ВрСтр, ПозТоч-1);
		КонецЕсли;
		server_time = Дата(ВрСтр) + ЧасовойПояс * 60 * 60;
	ИначеЕсли method = "Yobit" Тогда
		server_time = Дата("19700101000000") + ЧасовойПояс*60*60 + Сделка.Получить("timestamp");
	ИначеЕсли method = "Bitfinex" Тогда
		server_time = Дата("19700101000000") + ЧасовойПояс*60*60 + Сделка[1]/1000;
	КонецЕсли;
	
	Возврат server_time;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеОрдеров(server, Pair, СписокОрдеров, ТипОрдера = Неопределено)
	server_Pair = server + "_" + Pair;
	Если ТипОрдера = Неопределено Или ТипОрдера = "asks" Тогда
		ОчиститьСтакан("asks", server_Pair);
	КонецЕсли;
	Если ТипОрдера = Неопределено Или ТипОрдера = "bids" Тогда
		ОчиститьСтакан("bids", server_Pair);
	КонецЕсли;
	Для Каждого Ордер Из СписокОрдеров Цикл
		СтрокаТЧ = Объект[ТипОрдера].Добавить();
		ДобавитьСтрокуВТабЧасть(СтрокаТЧ, ТипОрдера + "_server_Pair", server_Pair, Ложь);
		СтрокаТЧ.Pair = Pair;
		СтрокаТЧ.server = server;
		Если server = "BTC-E" Тогда
			СтрокаТЧ.cur_main = Ордер[1];
			СтрокаТЧ.cur_val = Ордер[0];
		ИначеЕсли server = "Poloniex" Тогда
			СтрокаТЧ.cur_main = Ордер[1];
			СтрокаТЧ.cur_val = Ордер[0];
		ИначеЕсли server = "Bittrex" Тогда
			СтрокаТЧ.cur_val = Ордер.Получить("Rate");
			СтрокаТЧ.cur_main = Ордер.Получить("Quantity");
		ИначеЕсли server = "Yobit" Тогда
			СтрокаТЧ.cur_main = Ордер[1];
			СтрокаТЧ.cur_val = Ордер[0];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеОрдеровBitfinex(server, Pair, СписокОрдеров)
	server_Pair = server + "_" + Pair;
	ОчиститьСтакан("asks", server_Pair);
	ОчиститьСтакан("bids", server_Pair);
	Если ТипЗнч(СписокОрдеров) = Тип("Массив") Тогда
		Для Каждого Ордер Из СписокОрдеров Цикл
			//Count = Ордер[0];
			Price = Ордер[1];
			Amount = Ордер[2];
			Если Amount > 0 Тогда
				ТипОрдера = "bids";
			Иначе
				ТипОрдера = "asks";
				Amount = -Amount;
			КонецЕсли;
			СтрокаТЧ = Объект[ТипОрдера].Добавить();
			ДобавитьСтрокуВТабЧасть(СтрокаТЧ, ТипОрдера + "_server_Pair", server_Pair, Ложь);
			СтрокаТЧ.Pair = Pair;
			СтрокаТЧ.server = server;
			СтрокаТЧ.cur_main = Price;
			СтрокаТЧ.cur_val = Amount;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСделки(ТекущаяПара, СписокСделок)
	server_Pair = ТекущаяПара.server + "_" + ТекущаяПара.Pair;
	i = СписокСделок.Количество();
	СделокВМинуту = 0;
	ПоследняяМинута = Неопределено;
	Пока i > 0 Цикл
		Если ЗначениеЗаполнено(ТекущаяПара.last_timestamp) Тогда
			ПерваяСтрока = Объект.trades.НайтиПоИдентификатору(ТекущаяПара.ИдентификаторСтрокиTrade);
		Иначе
			ПерваяСтрока = Неопределено;
		КонецЕсли;
		Сделка = СписокСделок[i-1];
		ДатаСделки = ПолучитьВремяСделки(ТекущаяПара.server, Сделка);
		tid = Неопределено;
		Если ТекущаяПара.server = "BTC-E" Тогда
			tid = Сделка.Получить("tid");
		ИначеЕсли ТекущаяПара.server = "Poloniex" Тогда
			tid = Сделка.Получить("globalTradeID");
		ИначеЕсли ТекущаяПара.server = "Bittrex" Тогда
			tid = Сделка.Получить("Id");
		ИначеЕсли ТекущаяПара.server = "Yobit" Тогда
			tid = Сделка.Получить("tid");
		ИначеЕсли ТекущаяПара.server = "Bitfinex" Тогда
			tid = Сделка[0];
		КонецЕсли;
		Если ПерваяСтрока = Неопределено ИЛИ
			 ДатаСделки > ПерваяСтрока.timestamp ИЛИ
			 (ДатаСделки = ПерваяСтрока.timestamp И tid > ПерваяСтрока.tid) Тогда
			Если ПоследняяМинута = Неопределено ИЛИ
				 ПоследняяМинута <> ДатаСделки - Секунда(ДатаСделки) Тогда
				СделокВМинуту = 1;
				ПоследняяМинута = ДатаСделки - Секунда(ДатаСделки);
			Иначе
				СделокВМинуту = СделокВМинуту + 1;
			КонецЕсли;
			СтрокаТЧ = Объект.trades.Вставить(0);
			ДобавитьСтрокуВТабЧасть(СтрокаТЧ, "trades_server_Pair", server_Pair, Ложь);
			СтрокаТЧ.server = ТекущаяПара.server;
			СтрокаТЧ.Pair = ТекущаяПара.Pair;
			Если ТекущаяПара.server = "BTC-E" Тогда
				Для Каждого Колонка Из Сделка Цикл
					СтрокаТЧ[Колонка.Ключ] = Колонка.Значение;
				КонецЦикла;
				СтрокаТЧ.type = ?(Сделка.Получить("type") = "ask", "sell", "buy");
			ИначеЕсли ТекущаяПара.server = "Poloniex" Тогда
				СтрокаТЧ.type = Сделка.Получить("type");
				СтрокаТЧ.price = Сделка.Получить("rate");
				СтрокаТЧ.amount = Сделка.Получить("amount");
				СтрокаТЧ.tid = tid;
			ИначеЕсли ТекущаяПара.server = "Bittrex" Тогда
				СтрокаТЧ.type = НРег(Сделка.Получить("OrderType"));
				СтрокаТЧ.price = Сделка.Получить("Price");
				СтрокаТЧ.amount = Сделка.Получить("Quantity");
				СтрокаТЧ.tid = tid;
			ИначеЕсли ТекущаяПара.server = "Yobit" Тогда
				Для Каждого Колонка Из Сделка Цикл
					СтрокаТЧ[Колонка.Ключ] = Колонка.Значение;
				КонецЦикла;
				СтрокаТЧ.type = ?(Сделка.Получить("type") = "ask", "sell", "buy");
			ИначеЕсли ТекущаяПара.server = "Bitfinex" Тогда
				СтрокаТЧ.type = ?(Сделка[2]>0, "sell", "buy");
				СтрокаТЧ.price = Сделка[3];
				СтрокаТЧ.amount = ?(Сделка[2]>0, Сделка[2], -Сделка[2]);
				СтрокаТЧ.tid = tid;
			КонецЕсли;
			СтрокаТЧ.timestamp = ДатаСделки;
			Если ТекущаяПара.last_timestamp < СтрокаТЧ.timestamp Тогда
				ТекущаяПара.last_timestamp = СтрокаТЧ.timestamp;
			КонецЕсли;
			ТекущаяПара.ИдентификаторСтрокиTrade = СтрокаТЧ.ПолучитьИдентификатор();
			Если ТекущаяПара.trades_per_minute < СделокВМинуту Тогда
				ТекущаяПара.trades_per_minute = СделокВМинуту;
			КонецЕсли;
		КонецЕсли;
		i = i - 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОрдера()
	СоответствиеЗапросов = Новый Соответствие;
	Для Каждого СтрокаПары Из Объект.pairs Цикл
		Если Не ЗначениеЗаполнено(СтрокаПары.server) Или СтрокаПары.update_flag = Ложь Тогда
			Продолжить;
		КонецЕсли;
		СтрокаОтбора = СоответствиеЗапросов.Получить(СтрокаПары.server);
		ПолучитьСтрокуОтбора(СтрокаПары.server, СтрокаОтбора, СтрокаПары.Pair, Ложь);
		СоответствиеЗапросов.Вставить(СтрокаПары.server, СтрокаОтбора);
	КонецЦикла;
	
	КолКЗапросу = 200;
	Для Каждого ЗапросКСайту Из СоответствиеЗапросов Цикл
		НастройкаСервера = НайтиСтрокуИзТабЧасти("site_api", "method", ЗапросКСайту.Ключ);
		Если ТипЗнч(ЗапросКСайту.Значение) = Тип("Строка") Тогда
			СтрокаОтбора = ЗапросКСайту.Значение;
			ДлСтр = СтрДлина(СтрокаОтбора);
			Если ДлСтр > 1 Тогда
				СтрокаОтбора = Лев(СтрокаОтбора, ДлСтр - 1);
			КонецЕсли;
			//Активные ордера (стакан)
			ОтветСервера = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_orders + СтрокаОтбора, Новый Структура("limit", Формат(НастройкаСервера.orders, "ЧН=0; ЧГ=0")));
			Ответ = ПолучитьСписокКотировок(ЗапросКСайту.Ключ, ОтветСервера);
			Если Ответ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ТекущаяПара Из Ответ Цикл
				Для Каждого ТипОрдера Из ТекущаяПара.Значение Цикл
					НазваниеОрдера = ТипОрдера.Ключ;
					ЗаполнитьДанныеОрдеров(ЗапросКСайту.Ключ, ТекущаяПара.Ключ, ТипОрдера.Значение, ТипОрдера.Ключ);
				КонецЦикла;
			КонецЦикла;
			//Сделки
			ОтветСервера = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_trades + СтрокаОтбора, Новый Структура("limit", Формат(КолКЗапросу, "ЧН=0; ЧГ=0")));
			Ответ = ПолучитьСписокКотировок(ЗапросКСайту.Ключ, ОтветСервера);
			Если Ответ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ЗначениеОтвета Из Ответ Цикл
				server_Pair = ЗапросКСайту.Ключ + "_" + ЗначениеОтвета.Ключ;
				ТекущаяПара = НайтиСтрокуИзТабЧасти("pairs", "server_Pair", server_Pair);
				ЗаполнитьДанныеСделки(ТекущаяПара, ЗначениеОтвета.Значение);
			КонецЦикла;
		ИначеЕсли ТипЗнч(ЗапросКСайту.Значение) = Тип("Массив") Тогда
			Для Каждого ТорговаяПара Из ЗапросКСайту.Значение Цикл
				//Активные ордера (стакан)
				стр_bids = "";
				стр_asks = "";
				Если НастройкаСервера.method = "Poloniex" Тогда
					ОтветСервера = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_orders + "&currencyPair=" + ТорговаяПара + "&depth=" + Формат(НастройкаСервера.orders, "ЧН=0; ЧГ=0"));
					стр_bids = "bids";
					стр_asks = "asks";
				ИначеЕсли НастройкаСервера.method = "Bittrex" Тогда
					ОтветСервера = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_orders + ТорговаяПара + "&type=both&depth=" + Формат(НастройкаСервера.orders, "ЧН=0; ЧГ=0"));
					стр_bids = "sell";
					стр_asks = "buy";
				ИначеЕсли НастройкаСервера.method = "Bitfinex" Тогда
					ОтветСервера = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_orders + "/" + ТорговаяПара + "/" + НастройкаСервера.orders_precision, Новый Структура("len", Формат(НастройкаСервера.orders, "ЧН=0; ЧГ=0")));
				КонецЕсли;
				Если ОтветСервера = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ПустаяСтрока(стр_bids) Тогда
					ЗаполнитьДанныеОрдеровBitfinex(ЗапросКСайту.Ключ, ТорговаяПара, ОтветСервера);
				Иначе
					Ответ = ПолучитьСписокКотировок(ЗапросКСайту.Ключ, ОтветСервера);
					Если Ответ = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ЗаполнитьДанныеОрдеров(ЗапросКСайту.Ключ, ТорговаяПара, Ответ.Получить(стр_bids), "bids");
					ЗаполнитьДанныеОрдеров(ЗапросКСайту.Ключ, ТорговаяПара, Ответ.Получить(стр_asks), "asks");
				КонецЕсли;
				//Получить историю сделок
				server_Pair = ЗапросКСайту.Ключ + "_" + ТорговаяПара;
				ТекущаяПара = НайтиСтрокуИзТабЧасти("pairs", "server_Pair", server_Pair);
				СтрокаОтбора = "";
				Если НастройкаСервера.method = "Poloniex" Тогда
					Если ЗначениеЗаполнено(ТекущаяПара.last_timestamp) Тогда
						СекундСПрошлогоОтвета = ТекущаяДата() - ТекущаяПара.last_timestamp;
						КолКЗапросу = ТекущаяПара.trades_per_minute * Окр(СекундСПрошлогоОтвета / 60);
						СтрокаОтбора = "&depth=" + Формат(КолКЗапросу, "ЧН=0; ЧГ=0");
						//ТекущаяПара.trades_per_minute = 200;
					Иначе
						ВремяСтарта = ТекущаяДата() - ЧасовойПояс*60*60 - 40*1*60 - Дата("19700101000000");
						ВремяФиниша = ТекущаяДата() - ЧасовойПояс*60*60 - Дата("19700101000000");
						СтрокаОтбора = "&start=" + Формат(ВремяСтарта, "ЧГ=0") + "&end=" + Формат(ВремяФиниша, "ЧГ=0");
						КолКЗапросу = 200;
					КонецЕсли;
					Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_trades + "&currencyPair=" + ТекущаяПара.Pair + СтрокаОтбора);
				ИначеЕсли НастройкаСервера.method = "Bittrex" Тогда
					ОтветСервера = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_trades + "?market=" + ТекущаяПара.Pair);
					Если ОтветСервера = Неопределено Или ОтветСервера = Ложь Тогда
						Продолжить;
					КонецЕсли;
					Ответ = ПолучитьСписокКотировок(ЗапросКСайту.Ключ, ОтветСервера);
				ИначеЕсли НастройкаСервера.method = "Bitfinex" Тогда
					ПараметрыЗапроса = Новый Структура;//("limit, start, end, sort");
					Если ЗначениеЗаполнено(ТекущаяПара.last_timestamp) Тогда
						СекундСПрошлогоОтвета = ТекущаяДата() - ТекущаяПара.last_timestamp;
						КолКЗапросу = ТекущаяПара.trades_per_minute * Окр(СекундСПрошлогоОтвета / 60);
						ПараметрыЗапроса.Вставить("limit", Формат(КолКЗапросу, "ЧН=0; ЧГ=0"));
						//ТекущаяПара.trades_per_minute = 200;
					Иначе
						ВремяСтарта = ТекущаяДата() - ЧасовойПояс*60*60 - 40*1*60 - Дата("19700101000000");
						ВремяФиниша = ТекущаяДата() - ЧасовойПояс*60*60 - Дата("19700101000000");
						ПараметрыЗапроса.Вставить("start", Формат(ВремяСтарта, "ЧГ=0"));
						ПараметрыЗапроса.Вставить("end", Формат(ВремяФиниша, "ЧГ=0"));
						ПараметрыЗапроса.Вставить("limit", Формат(200, "ЧГ=0"));
					КонецЕсли;
					ПутьЗапроса = НастройкаСервера.url_trades;
					ПутьЗапроса = СтрЗаменить(ПутьЗапроса, "Symbol", ТекущаяПара.Pair);
					Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, ПутьЗапроса, ПараметрыЗапроса);
				КонецЕсли;
				Если Ответ = Неопределено Или Ответ = Ложь Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьДанныеСделки(ТекущаяПара, Ответ);
				//
				//+неофициальный API bittrex
				//Если Объект.History Тогда 
				//	ОтветСервера = ЗапросНаБиржу(НастройкаСервера.url_server, "Api/v2.0/pub/market/GetTicks" + "?marketName=" + ТекущаяПара.Pair+"&tickInterval="+ДлительностьСвечи());		
				//	Ответ = ПолучитьСписокКотировок(ЗапросКСайту.Ключ, ОтветСервера);
				//	Если Ответ <> Неопределено Тогда
				//		ЗаполнитьданныеДляГрафика(ТекущаяПара,Ответ);
				//		Объект.History = Ложь;
				//	КонецЕсли;
				//КонецЕсли;
			    //-неофициальный API bittrex
				//
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ПодключитьОбработчикОжидания("УстановитьПервуюСтрокуИсторииТоргов", 0.1, Истина);
	//Объект.asks.Сортировать("cur_val");
	//Объект.bids.Сортировать("cur_val Убыв");
	//Объект.trades.Сортировать("timestamp Убыв, tid Убыв");
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьПервуюСтрокуИсторииТоргов()
	ТекущаяПара = Элементы.АктивныеПары.ТекущиеДанные;
	ЭтаФорма.Элементы.trades.Обновить();
	Если ТекущаяПара <> Неопределено Тогда
		ПоследняяСтрока = Объект.trades.НайтиПоИдентификатору(ТекущаяПара.ИдентификаторСтрокиTrade);
		ЭтаФорма.Элементы.trades.ТекущаяСтрока = ТекущаяПара.ИдентификаторСтрокиTrade;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтакан(ИмяСтакана, server_Pair)
	Индекс = ИндексыТабличныхЧастей.Получить(ИмяСтакана + "_server_Pair");
	Если Индекс = Неопределено Тогда
		Индекс = Новый Соответствие;
	КонецЕсли;
	СтрокиТЧ = Индекс.Получить(server_Pair);
	ТабЧасть = Объект[ИмяСтакана];
	Если ТипЗнч(СтрокиТЧ) = Тип("Массив") Тогда
		Для Каждого ИдентификаторСтроки Из СтрокиТЧ Цикл
			СтрокаТЧ = ТабЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
			ТабЧасть.Удалить(СтрокаТЧ);
		КонецЦикла;
		Индекс.Вставить(server_Pair, Неопределено);
	КонецЕсли;
	ИндексыТабличныхЧастей.Вставить(ИмяСтакана + "_server_Pair", Индекс);
КонецПроцедуры	

&НаКлиенте
Функция ОбъектAddInИзМакета(ИмяМакета, ИмяКомпоненты, ИмяОбъекта) Экспорт 
	Результат = Неопределено;
	
	ПолноеИмяОбъекта = ЭтаФорма.ИмяФормы;
	Поз = Найти(ПолноеИмяОбъекта, "Форма");
	ПолноеИмяОбъекта = Лев(ПолноеИмяОбъекта, Поз-1);
	
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(ПолноеИмяОбъекта + "Макет." + ИмяМакета, ИмяКомпоненты, ТипВнешнейКомпоненты.Native);
	Если КомпонентаПодключена Тогда
		Результат = Новый("AddIn." + ИмяКомпоненты + "." + ИмяОбъекта);
	Иначе
		УстановитьВнешнююКомпоненту("ВнешняяОбработка.CryptoTrader.Макет." + ИмяМакета);
		КомпонентаПодключена = ПодключитьВнешнююКомпоненту(ПолноеИмяОбъекта + "Макет." + ИмяМакета, ИмяКомпоненты, ТипВнешнейКомпоненты.Native);
		Результат = Новый("AddIn." + ИмяКомпоненты + "." + ИмяОбъекта);
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокПар(Команда)
	ОбновитьСписокПарФн();
КонецПроцедуры

&НаКлиенте
Функция ЗапросНаБиржу(server, method, Параметры = Неопределено, apikey = Неопределено, apisecret = Неопределено, site_api = Неопределено) Экспорт
	Перем Соответствие;
	//СтрокаПараметров = "";
	ВременныйФайл = ПолучитьИмяВременногоФайла("json");
	Если HTTPСоединение = Неопределено Тогда
		SSL = Новый ЗащищенноеСоединениеOpenSSL;
	    HTTPСоединение = Новый HTTPСоединение(server,,,,,Объект.timeout,SSL);
	ИначеЕсли HTTPСоединение.Сервер <> server Тогда
		SSL = Новый ЗащищенноеСоединениеOpenSSL;
	    HTTPСоединение = Новый HTTPСоединение(server,,,,,Объект.timeout,SSL);
	КонецЕсли;
	ЗаголовокHTTP = Новый Соответствие(); 
	ЗаголовокHTTP.Вставить("content-type", "application/x-www-form-urlencoded;");
	ТелоЗапроса = "";
	ПутьЗапроса = method;// + СтрокаПараметров;
	Если apikey <> Неопределено Тогда
		Если site_api = "Bittrex" Тогда
			unixtime = Формат(УниверсальноеВремя(ТекущаяДата()) - дата(1970,1,1,1,0,0), "ЧГ=0");
			СтрокаПараметров = СформироватьСтрокуПараметров(Параметры, apikey, unixtime);
			ПутьЗапроса = ПутьЗапроса + "?" + СтрокаПараметров;
			uri = "https://" + server + ПутьЗапроса;
			sign=hash_hmac_sha512(uri,apisecret);
			ЗаголовокHTTP.Вставить("apisign", sign); 
			ЗаголовокHTTP.Вставить("apikey", apikey); 
		ИначеЕсли site_api = "BTC-E" Или site_api = "Yobit" Тогда
			unixtime = Формат(УниверсальноеВремя(ТекущаяДата()) - дата(1970,1,1,1,0,0), "ЧГ=0");   
			//uri='https://wex.nz/tapi?method=getInfo&nonce='.$nonce;
			//СтрокаПараметров = "&nonce=" + unixtime;
			СтрокаПараметров = СформироватьСтрокуПараметров(Параметры, apikey, unixtime);
			ПозQ = Найти(method, "?");
			ТелоЗапроса = Сред(method, ПозQ + 1) + "&" + СтрокаПараметров;
			ПутьЗапроса = Лев(method, ПозQ - 1);
			//ТелоЗапроса = СтрЗаменить(ПутьЗапроса + СтрокаПараметров, "/tapi?", "");
			sign=hash_hmac_sha512(ТелоЗапроса,apisecret);
			ЗаголовокHTTP.Вставить("Key", apikey); 
			ЗаголовокHTTP.Вставить("Sign", sign); 
		ИначеЕсли site_api = "Poloniex" Тогда
			//start_date = Формат(УниверсальноеВремя(ДобавитьМесяц(ТекущаяДата(),-6)) - дата(1970,1,1,1,0,0), "ЧГ=0");   
			unixtime = Формат((УниверсальноеВремя(ТекущаяДата()) - дата(1970,1,1,1,0,0))*1000, "ЧГ=0");
			СтрокаПараметров = СформироватьСтрокуПараметров(Параметры, apikey, unixtime);
			//СтрокаПараметров = "&start=" + start_date + "&nonce=" + unixtime;
			ПозQ = Найти(method, "?");
			ТелоЗапроса = Сред(method, ПозQ + 1) + "&" + СтрокаПараметров;
			//ТелоЗапроса = СтрЗаменить(method + СтрокаПараметров, "/tradingApi?", "");
			ПутьЗапроса = Лев(method, ПозQ - 1);//"/tradingApi";
			sign=hash_hmac_sha512(ТелоЗапроса,apisecret);
			ЗаголовокHTTP.Вставить("Sign", sign); 
			ЗаголовокHTTP.Вставить("Key", apikey); 
		ИначеЕсли site_api = "Bitfinex" Тогда
			unixtime = Формат(УниверсальноеВремя(ТекущаяДата()) - дата(1970,1,1,1,0,0), "ЧГ=0");
			Если Найти(ПутьЗапроса, "v2") > 0 Тогда
				body_st = Новый Структура();
	            body = Новый ЗаписьJSON;
				body.УстановитьСтроку();
				ЗаписатьJSON(body, body_st);
				ТелоЗапроса = body.Закрыть();
				signature = "/api" + ПутьЗапроса + unixtime + ТелоЗапроса;
				sign=hash_hmac_sha384(signature,apisecret);
				
				uri = "https://" + server + ПутьЗапроса;
				ЗаголовокHTTP.Вставить("bfx-nonce", unixtime); 
				ЗаголовокHTTP.Вставить("bfx-apikey", apikey); 
				ЗаголовокHTTP.Вставить("bfx-signature", sign);
				ЗаголовокHTTP.Вставить("content-type", "application/json");
			ИначеЕсли Найти(ПутьЗапроса, "v1") > 0 Тогда
				body_st = Новый Структура("request, nonce", ПутьЗапроса, unixtime);
				//body_st = Новый Структура("request, nonce, options", ПутьЗапроса, unixtime, Параметры);
				Если ТипЗнч(Параметры) = Тип("Соответствие") Тогда
					Для Каждого ЭлементПараметра Из Параметры Цикл
						body_st.Вставить(ЭлементПараметра.Ключ, ЭлементПараметра.Значение);
					КонецЦикла;
				КонецЕсли;
	            body = Новый ЗаписьJSON;
				ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
				body.УстановитьСтроку(ПараметрыЗаписиJSON);
				ЗаписатьJSON(body, body_st);
				ТелоЗапроса = body.Закрыть();
				payload = ТелоЗапроса;
				payload = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(payload, КодировкаТекста.UTF8));
				sign=hash_hmac_sha384(payload,apisecret,истина);
				uri = "https://" + server + ПутьЗапроса;
				ЗаголовокHTTP.Вставить("X-BFX-APIKEY", apikey); 
				ЗаголовокHTTP.Вставить("X-BFX-PAYLOAD", payload);
				ЗаголовокHTTP.Вставить("X-BFX-SIGNATURE", sign);
				ЗаголовокHTTP.Вставить("content-type", "application/json");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//ЗаголовокHTTP.Вставить("Content-Length", Формат(ДлинаСообщения,"ЧГ=")); 
	ЗаголовокHTTP.Вставить("Connection", "Keep-alive");
	ЗаголовокHTTP.Вставить("GET", ПутьЗапроса + " HTTP/1.1");
	ЗаголовокHTTP.Вставить("Host", server);
	ЗаголовокHTTP.Вставить("User-Agent","Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64)");
	//ЗаголовокHTTP.Вставить("Accept-Encoding", "gzip,deflate,sdch");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Accept", "application/json, text/javascript, */*; q=0.01");
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Для Каждого ЭлементПараметра Из Параметры Цикл
			ЗаголовокHTTP.Вставить(ЭлементПараметра.Ключ, ЭлементПараметра.Значение);
		КонецЦикла;
	КонецЕсли;
	Запрос = Новый HTTPЗапрос(ПутьЗапроса, ЗаголовокHTTP);
	Попытка
		Если ПустаяСтрока(ТелоЗапроса) Тогда
			HTTPОтвет = HTTPСоединение.Получить(Запрос);//, ВременныйФайл);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		    HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(Запрос);
		КонецЕсли;
	Исключение
		Ошибка = ИнформацияОбОшибке();
		HTTPОтвет = Новый Структура("КодСостояния, Описание", 500, Ошибка.Причина.Описание);
		Состояние(HTTPОтвет.Описание);
		Соответствие = Ложь;
	КонецПопытки;
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Если HTTPОтвет.Заголовки.Получить("Content-Encoding") = "gzip" Тогда
			Файл = Новый ЧтениеТекста(ВременныйФайл);
			СжатаяСтрока = Файл.Прочитать();
			Файл.Закрыть();
		    ТекстОтвета = ОтжатьПоток(СжатаяСтрока);
			Файл = Новый ЗаписьТекста(ВременныйФайл);
			Файл.Записать(ТекстОтвета);
			Файл.Закрыть();
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьПоток(HTTPОтвет.ПолучитьТелоКакПоток());
		//ЧтениеJSON.ОткрытьФайл(ВременныйФайл);
		ПрочитатьJSONВСоответствие(ЧтениеJSON, Соответствие);
		ЧтениеJSON.Закрыть();
	Иначе
		Если ТипЗнч(HTTPОтвет) = Тип("HTTPОтвет") Тогда
			ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Иначе
			ТекстОтвета = HTTPОтвет.Описание;
		КонецЕсли;
		ПоказатьОповещениеПользователя("Ошибка",, ТекстОтвета,, СтатусОповещенияПользователя.Информация);
	КонецЕсли;
	//УдалитьФайлы(ВременныйФайл);
	Возврат Соответствие;
КонецФункции

Функция СформироватьСтрокуПараметров(Параметры, apikey = Неопределено, nonce = Неопределено)
	СтрокаПараметров = "";
	Если Параметры <> Неопределено Тогда
		//Если Лев(СтрокаПараметров, 1) <> "?" Тогда
		//	СтрокаПараметров = "?" + СтрокаПараметров;
		//КонецЕсли;
		Для Каждого ЭлементПараметра Из Параметры Цикл
			СтрокаПараметров = СтрокаПараметров + ЭлементПараметра.Ключ + "=" + ЭлементПараметра.Значение + "&";
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(apikey) = Тип("Строка") И Не ПустаяСтрока(apikey) Тогда
		СтрокаПараметров = СтрокаПараметров + "apikey=" + apikey + "&";
	КонецЕсли;
	Если ТипЗнч(nonce) = Тип("Строка") И Не ПустаяСтрока(nonce) Тогда
		СтрокаПараметров = СтрокаПараметров + "nonce=" + nonce;
	Иначе
		Если Прав(СтрокаПараметров, 1) = "&" Тогда
			СтрокаПараметров = Сред(СтрокаПараметров, 1, СтрДлина(СтрокаПараметров) - 1);
		КонецЕсли;
	КонецЕсли;
	Возврат СтрокаПараметров;
КонецФункции	

&НаКлиенте
Процедура ПрочитатьJSONВСоответствие(ЧтениеJSON, Дерево)
    
    ИмяСвойства = Неопределено;
    
    Пока ЧтениеJSON.Прочитать() Цикл
        TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
        
        Если TипJSON = ТипЗначенияJSON.НачалоОбъекта 
        ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
            НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
            
            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
                Дерево.Добавить(НовыйОбъект);
            ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
                Дерево.Вставить(ИмяСвойства, НовыйОбъект);
            КонецЕсли;
            
            ПрочитатьJSONВСоответствие(ЧтениеJSON, НовыйОбъект);
            
            Если Дерево = Неопределено Тогда
                Дерево = НовыйОбъект;
            КонецЕсли;
        ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
            ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
        ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
        ИЛИ TипJSON = ТипЗначенияJSON.Строка 
        ИЛИ TипJSON = ТипЗначенияJSON.Булево 
        ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
                Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
            ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") Тогда
                Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
            КонецЕсли;
        Иначе
            Возврат;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Функция ОтжатьПоток(СжатаяСтрока)
	РаспакованнаяСтрока = ОбъектAddIn.РаспаковатьСтрокуBase64(СжатаяСтрока, Ложь);
    Возврат РаспакованнаяСтрока;
КонецФункции

&НаКлиенте
Процедура НарисоватьГрафик(Команда)
	ОбновитьОрдера();
	ЗаполнитьГрафик();
	ПодключитьОбработчикОжидания("ЗаполнитьГрафик", 60, Ложь);
	ПодключитьОбработчикОжидания("ОбновитьИсториюОрдеров", 5, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафик()
	Диаграмма.Обновление = Ложь;
	Если Объект.ТипГрафика = "БиржеваяСвеча" Тогда
		ЭтаФорма.Элементы.Диаграмма.Видимость = Истина;
		ЭтаФорма.Элементы.HTMLДокумент.Видимость = Ложь;
		Диаграмма.ТипДиаграммы = ТипДиаграммы.БиржеваяСвеча;
	ИначеЕсли Объект.ТипГрафика = "График" Тогда
		ЭтаФорма.Элементы.Диаграмма.Видимость = Истина;
		ЭтаФорма.Элементы.HTMLДокумент.Видимость = Ложь;
		Диаграмма.ТипДиаграммы = ТипДиаграммы.График;
	ИначеЕсли Объект.ТипГрафика = "GoogleCharts" Тогда
		ЭтаФорма.Элементы.Диаграмма.Видимость = Ложь;
		ЭтаФорма.Элементы.HTMLДокумент.Видимость = Истина;
	КонецЕсли;
	
	СтрокиАктивныхПар = НайтиСтроки(Объект.pairs, Новый Структура("update_flag", Истина));
    АктивныеДанные = Элементы.АктивныеПары.ТекущиеДанные;
	
	Для Каждого СтрокаПары Из СтрокиАктивныхПар Цикл
		trade_pair = СтрокаПары.server + "_" + СтрокаПары.Pair;
		ТекущаяСерия = Диаграмма.УстановитьСерию(trade_pair);
		ТекущаяСерия.Текст = trade_pair;
		ТекущаяСерия.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		Если Диаграмма.ТипДиаграммы = ТипДиаграммы.БиржеваяСвеча Тогда
			ТекущаяСерия.Цвет = Новый Цвет(51,147,73);
		Иначе
			ТекущаяСерия.Цвет = Новый Цвет();
		КонецЕсли;
		ПараметрыПары = ПолучитьДанныеДляСвечей(СтрокаПары.server, СтрокаПары.Pair, trade_pair, Объект.КолСвечей, Объект.ДлитСвечи, СтрокаПары);
		//Если ТекущаяСерия.ЛинииТренда.Количество() = 0 Тогда
		//	ЛинияТренда = ТекущаяСерия.ЛинииТренда.Добавить();
		//	ЛинияТренда.ТипАппроксимации = ТипАппроксимацииЛинииТрендаДиаграммы.Полиномиальный;
		//	ЛинияТренда.ПорядокАппроксимации = Цел(Объект.КолСвечей / 3);
		//	ЛинияТренда.ОтображатьУравнение = Истина;
		//	ЛинияТренда.ОтображатьКоэффициентДетерминации = Истина;
		//	ЛинияТренда.ИспользуемоеЗначениеТочкиБиржевойДиаграммы = ИспользуемоеЗначениеТочкиБиржевойДиаграммы.Закрытие;
		//КонецЕсли;
		БазовоеЗначение = ПараметрыПары.low - (ПараметрыПары.high - ПараметрыПары.low) / 20;
		//Если Диаграмма.БазовоеЗначение = 0 Или Диаграмма.БазовоеЗначение > БазовоеЗначение Тогда
			//Диаграмма.ОсьЗначений.МинимальноеЗначение = БазовоеЗначение; 
			//Диаграмма.ОсьЗначений.БазовоеЗначение = БазовоеЗначение; 
			Диаграмма.ОсьЗначений.СпособОпределенияМинимальногоЗначения = СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначениеСОграничением;
			//Диаграмма.ОсьЗначений.МаксимальноеЗначение = ПараметрыПары.high;
			Диаграмма.ОсьЗначений.СпособОпределенияМаксимальногоЗначения = СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначениеСОграничением;
		//КонецЕсли;
		//Если Диаграмма.МаксимальноеЗначение = 0 Или Диаграмма.МаксимальноеЗначение < ПараметрыПары.high Тогда
		//КонецЕсли;
		
		last_timestamp = Неопределено;
		Данные = НайтиСтроки(Объект.charts, Новый Структура("trade_pair", trade_pair));
		АнализТорговли(Данные, СтрокаПары.server, СтрокаПары.Pair, trade_pair);
		
		МинимальноеЗначение = СтрокаПары.last;
		МаксимальноеЗначение = МинимальноеЗначение;
		ТекущаяСерия = Диаграмма.УстановитьСерию(trade_pair);
		Если Диаграмма.ТипДиаграммы = ТипДиаграммы.БиржеваяСвеча Или Объект.ТипГрафика = "GoogleCharts" Тогда
			Свечей = Объект.КолСвечей;//Диаграмма.Точки.Количество() / 4;
			
			ТекущийПериод = ТекущаяДата();
			ТекущиеМинуты = Минута(ТекущийПериод);
			ТекущиеСекунды = Секунда(ТекущийПериод);
			ОкрМинуты = Объект.ДлитСвечи * Цел(ТекущиеМинуты / Объект.ДлитСвечи);
			ТекущийПериод = ТекущийПериод - ТекущиеМинуты * 60 - ТекущиеСекунды + ОкрМинуты * 60;
			i = Данные.Количество();
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(json_template);
			ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
			
			СтрокаПериода = Неопределено;
			Пока Свечей > 0 Цикл
				Если i > 0 Тогда
					ЗначенияСвечи = Данные[i-1];
				КонецЕсли;
				Если МинимальноеЗначение > ЗначенияСвечи.low Тогда
					МинимальноеЗначение = ЗначенияСвечи.low;
				КонецЕсли;
				Если МаксимальноеЗначение > ЗначенияСвечи.high Тогда
					МаксимальноеЗначение = ЗначенияСвечи.high;
				КонецЕсли;
				ТекстТочки = Неопределено;
				Если ЗначенияСвечи.Buy Тогда
					ТекстТочки = "Buy";
				ИначеЕсли ЗначенияСвечи.Sell Тогда
					ТекстТочки = "Sell";
				КонецЕсли;
				Если ЗначенияСвечи.timestamp < ТекущийПериод Тогда
					УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей*4-1, ЗначенияСвечи.close, ТекущийПериод);
					УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей*4-2, ЗначенияСвечи.close, ТекущийПериод);
					УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей*4-3, ЗначенияСвечи.close, ТекущийПериод);
					УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей*4-4, ЗначенияСвечи.close, ТекущийПериод);
					МассивДанных = СформироватьМассивСтроки(ТекущийПериод, ЗначенияСвечи.close, ЗначенияСвечи.close, ЗначенияСвечи.close, ЗначенияСвечи.close, ТекстТочки);
				ИначеЕсли ЗначенияСвечи.timestamp = ТекущийПериод Тогда
					УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей*4-1, ЗначенияСвечи.close, ТекущийПериод);
					УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей*4-2, ЗначенияСвечи.low, ТекущийПериод);
					УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей*4-3, ЗначенияСвечи.high, ТекущийПериод);
					УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей*4-4, ЗначенияСвечи.open, ТекущийПериод);
					ЗначенияСвечи.disp = Истина;
					i = i - 1;
					МассивДанных = СформироватьМассивСтроки(ТекущийПериод, ЗначенияСвечи.low, ЗначенияСвечи.open, ЗначенияСвечи.close, ЗначенияСвечи.high, ТекстТочки);
				ИначеЕсли ЗначенияСвечи.timestamp > ТекущийПериод Тогда
					УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей*4-1, ЗначенияСвечи.open, ТекущийПериод);
					УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей*4-2, ЗначенияСвечи.open, ТекущийПериод);
					УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей*4-3, ЗначенияСвечи.open, ТекущийПериод);
					УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей*4-4, ЗначенияСвечи.open, ТекущийПериод);
					МассивДанных = СформироватьМассивСтроки(ТекущийПериод, ЗначенияСвечи.open, ЗначенияСвечи.open, ЗначенияСвечи.open, ЗначенияСвечи.open, ТекстТочки);
				КонецЕсли;
				СтрокаДанныхJSON = Новый Соответствие;
				СтрокаДанныхJSON.Вставить("c", МассивДанных);
				ДанныеJSON.Получить("rows").Добавить(СтрокаДанныхJSON);
				//УстановитьЗначениеТочки(Диаграмма_Надписи, ТекущаяСерияНадписи, Свечей*4-3, ЗначенияСвечи.macd, ТекущийПериод, ТекстТочки);
				Свечей = Свечей - 1;
				ТекущийПериод = ТекущийПериод - 60 * Объект.ДлитСвечи;
			КонецЦикла;
			//Соответствие.Получить("rows")[0].Получить("c")[0].Получить("v")
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
			ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
			ПараметрыПары.json_data = ЗаписьJSON.Закрыть();
		ИначеЕсли Диаграмма.ТипДиаграммы = ТипДиаграммы.График Тогда
			Свечей = Диаграмма.Точки.Количество();
			
			ТекущийПериод = ТекущаяДата();
			ТекущиеМинуты = Минута(ТекущийПериод);
			ТекущиеСекунды = Секунда(ТекущийПериод);
			ОкрМинуты = Объект.ДлитСвечи * Цел(ТекущиеМинуты / Объект.ДлитСвечи);
			ТекущийПериод = ТекущийПериод - ТекущиеМинуты * 60 - ТекущиеСекунды + ОкрМинуты * 60;
			
			i = Данные.Количество();
			
			СтрокаПериода = Неопределено;
			Пока Свечей > 0 Цикл
				Если i > 0 Тогда
					ЗначенияСвечи = Данные[i-1];
				КонецЕсли;
				Если МинимальноеЗначение > ЗначенияСвечи.low Тогда
					МинимальноеЗначение = ЗначенияСвечи.low;
				КонецЕсли;
				Если МаксимальноеЗначение > ЗначенияСвечи.high Тогда
					МаксимальноеЗначение = ЗначенияСвечи.high;
				КонецЕсли;
				ТекстТочки = "";
				Если ЗначенияСвечи.Buy Тогда
					ТекстТочки = "Buy";
				ИначеЕсли ЗначенияСвечи.Sell Тогда
					ТекстТочки = "Sell";
				КонецЕсли;
				УстановитьЗначениеТочки(Диаграмма, ТекущаяСерия, Свечей-1, (ЗначенияСвечи.open + ЗначенияСвечи.close) / 2, ТекущийПериод, ТекстТочки);
				Если ЗначенияСвечи.timestamp = ТекущийПериод Тогда
					ЗначенияСвечи.disp = Истина;
					i = i - 1;
				КонецЕсли;
				Свечей = Свечей - 1;
				ТекущийПериод = ТекущийПериод - 60 * Объект.ДлитСвечи;
			КонецЦикла;
		КонецЕсли;
		СтрокаПары.chart_low = МинимальноеЗначение; 
		СтрокаПары.chart_high = МаксимальноеЗначение;
		Если АктивныеДанные <> Неопределено И СтрокаПары.server = АктивныеДанные.server И СтрокаПары.Pair = АктивныеДанные.Pair Тогда
			ОбновитьГрафикиАналитики(trade_pair, Данные);
		КонецЕсли;
	КонецЦикла;
	Если АктивныеДанные <> Неопределено Тогда
		trade_pair = АктивныеДанные.server + "_" + АктивныеДанные.Pair;
		Если Диаграмма.ТипДиаграммы = ТипДиаграммы.БиржеваяСвеча Тогда
			Диаграмма.АктивнаяСерия = Диаграмма.УстановитьСерию(trade_pair);
			БазовоеЗначение = СтрокаПары.chart_low - (СтрокаПары.chart_high - СтрокаПары.chart_low) / 20;
			//Диаграмма.БазовоеЗначение = БазовоеЗначение;
		ИначеЕсли Объект.ТипГрафика = "GoogleCharts" И ParentWindow <> Неопределено Тогда
			СтрокиАктивнойПары = НайтиСтроки(Объект.active_pair, Новый Структура("trade_pair", trade_pair));
			Если СтрокиАктивнойПары.Количество() > 0 Тогда
				АктивныеДанные = СтрокиАктивнойПары[0];
				ParentWindow.ChartDataUpdate(АктивныеДанные.json_data, trade_pair);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Диаграмма.Обновление = Истина;
КонецПроцедуры

&НаКлиенте
Функция СформироватьМассивСтроки(Период, low, open, close, high, text)
	МассивДанных = Новый Массив;
	СтрокаДаты = "Date(" + Формат(Год(Период), "ЧН=0; ЧГ=0") + "," +
	Формат(Месяц(Период), "ЧН=0; ЧГ=0") + "," +
	Формат(День(Период), "ЧН=0; ЧГ=0") + "," +
	Формат(Час(Период), "ЧН=0; ЧГ=0") + "," +
	Формат(Минута(Период), "ЧН=0; ЧГ=0") + "," +
	Формат(Секунда(Период), "ЧН=0; ЧГ=0") + ")";
	ДобавитьЗначениеСтроки(МассивДанных, СтрокаДаты);
	ДобавитьЗначениеСтроки(МассивДанных, low);
	ДобавитьЗначениеСтроки(МассивДанных, open);
	ДобавитьЗначениеСтроки(МассивДанных, close);
	ДобавитьЗначениеСтроки(МассивДанных, high);
	ДобавитьЗначениеСтроки(МассивДанных, high);
	ДобавитьЗначениеСтроки(МассивДанных, text);
	Возврат МассивДанных;
КонецФункции

&НаКлиенте
Процедура ДобавитьЗначениеСтроки(МассивДанных, Значение)
	Соответсвие = Новый Соответствие;
	Соответсвие.Вставить("v", Значение);
	МассивДанных.Добавить(Соответсвие);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГрафикиАналитики(trade_pair, Данные = Неопределено)
	//Macd = ТабДок.Рисунки.Диаграмма.Объект;
	Macd.Обновление   = Ложь;
	RSI.Обновление    = Ложь;
	StochOscillator.Обновление = Ложь;
	MacdСерия         = Macd.УстановитьСерию("MACD");
    SignalСерия       = Macd.УстановитьСерию("Signal");
    HistСерия       = Macd.УстановитьСерию("Hist");
    RSIСерия          = RSI.УстановитьСерию("RSI");
    RSIСерия2         = RSI.УстановитьСерию("RSI2");
    OverSoldСерия     = RSI.УстановитьСерию("OverSold");
    OverboughtСерия   = RSI.УстановитьСерию("Overbought");
	FastStochСерия    = StochOscillator.УстановитьСерию("FastStoch");
    SlowStochСерия    = StochOscillator.УстановитьСерию("SlowStoch");
	
	Если Данные = Неопределено Тогда
		Данные = НайтиСтроки(Объект.charts, Новый Структура("trade_pair", trade_pair));
	КонецЕсли;
	Свечей = Объект.КолСвечей;
	
	ТекущийПериод = ТекущаяДата();
	ТекущиеМинуты = Минута(ТекущийПериод);
	ТекущиеСекунды = Секунда(ТекущийПериод);
	ОкрМинуты = Объект.ДлитСвечи * Цел(ТекущиеМинуты / Объект.ДлитСвечи);
	ТекущийПериод = ТекущийПериод - ТекущиеМинуты * 60 - ТекущиеСекунды + ОкрМинуты * 60;
	
	i = Данные.Количество();
	
	СтрокаПериода = Неопределено;
	Пока Свечей > 0 И i > 0 Цикл
		Если i > 0 Тогда
			ЗначенияСвечи = Данные[i-1];
		КонецЕсли;
		УстановитьЗначениеТочки(Macd, MacdСерия, Свечей-1, ЗначенияСвечи.macd, ТекущийПериод);
		УстановитьЗначениеТочки(Macd, SignalСерия, Свечей-1, ЗначенияСвечи.Signal, ТекущийПериод);
		УстановитьЗначениеТочки(Macd, HistСерия, Свечей-1, ЗначенияСвечи.Hist, ТекущийПериод);
		УстановитьЗначениеТочки(RSI, RSIСерия, Свечей-1, ЗначенияСвечи.RSI, ТекущийПериод);
		УстановитьЗначениеТочки(RSI, RSIСерия2, Свечей-1, ЗначенияСвечи.RSI2, ТекущийПериод);
		УстановитьЗначениеТочки(RSI, OverSoldСерия, Свечей-1, 30, ТекущийПериод);
		УстановитьЗначениеТочки(RSI, OverboughtСерия, Свечей-1, 70, ТекущийПериод);
		УстановитьЗначениеТочки(StochOscillator, FastStochСерия, Свечей-1, ЗначенияСвечи.DFast, ТекущийПериод);
		УстановитьЗначениеТочки(StochOscillator, SlowStochСерия, Свечей-1, ЗначенияСвечи.DSlow, ТекущийПериод);
		Свечей = Свечей - 1;
		i = i - 1;
		ТекущийПериод = ТекущийПериод - 60 * Объект.ДлитСвечи;
	КонецЦикла;
	Macd.Обновление = Истина;
	RSI.Обновление = Истина;
	StochOscillator.Обновление = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеТочки(ВрДиаграмма, ТекущаяСерия, НомерТочки, ЗначениеСвечи, Период, ТекстТочки = Неопределено)
	//Если СтрокаПериода <> Неопределено И СтрокаПериода[ИмяРеквизита + "_point"] >= 0 Тогда
	//	ТочкаДиаграммы = ВрДиаграмма.Точки[СтрокаПериода[ИмяРеквизита + "_point"]];
	//	СтрокаЗначений[ИмяРеквизита + "_point"] = СтрокаПериода[ИмяРеквизита + "_point"];
	//Иначе
	//	ТочкаДиаграммы = ВрДиаграмма.УстановитьТочку(НомерТочки);
	//	ТочкаДиаграммы.Текст = Формат(СтрокаЗначений.timestamp, "ДФ=HH:mm");
	//КонецЕсли;
	ТочкаДиаграммы = ВрДиаграмма.УстановитьТочку(НомерТочки);
	//Если ТекстТочки = Неопределено Тогда
		ТочкаДиаграммы.Текст = Формат(Период, "ДФ=HH:mm");
	//Иначе
	//	ТочкаДиаграммы.Текст = ТекстТочки;
	//КонецЕсли;
	//СтрокаЗначений[ИмяРеквизита + "_point"] = ТочкаДиаграммы.Значение;
	ВрДиаграмма.УстановитьЗначение(ТочкаДиаграммы, ТекущаяСерия, ЗначениеСвечи);
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьДанныеДляСвечей(server, pair, trade_pair, КоличествоСвечей = 80, Знач ПериодСвечи = 1, СтрокаПары = Неопределено)
	Перем ПараметрыПары, ПоследняяСвеча;
	СтрокиАктивнойПары = НайтиСтроки(Объект.active_pair, Новый Структура("trade_pair", trade_pair));
	Если СтрокиАктивнойПары.Количество() > 0 Тогда
		ПараметрыПары = СтрокиАктивнойПары[0];
		Если ПараметрыПары.candle_wide <> ПериодСвечи Тогда
			СтрокиПары = НайтиСтроки(Объект.charts, Новый Структура("trade_pair", trade_pair));
			Для Каждого СтрокаТЧ Из СтрокиПары Цикл
				Объект.charts.Удалить(СтрокаТЧ);
			КонецЦикла;
			ПараметрыПары.candle_wide = ПериодСвечи;
			ПараметрыПары.last_timestamp = Дата("00010101000000");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыПары.last_timestamp) Тогда
			СтрокиПары = НайтиСтроки(Объект.charts, Новый Структура("trade_pair, timestamp", trade_pair, ПараметрыПары.last_timestamp));
			Если СтрокиПары.Количество() > 0 Тогда
				ПоследняяСвеча = СтрокиПары[0];
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыПары = Объект.active_pair.Добавить();
		ПараметрыПары.trade_pair = trade_pair;
		ПараметрыПары.candle_wide = ПериодСвечи;
	КонецЕсли;
	
	//МинимальноеЗначение = 0;
	//МаксимальноеЗначение = 0;
	//СтрокиСервера = Объект.site_api.НайтиСтроки(Новый Структура("url_server", Server));
	//НастройкиСервера = СтрокиСервера[0];
	//МассивДанных = Новый Массив;
	Если server = "BTC-E" Или server = "Yobit" Тогда
		ТекущийПериод = Неопределено;
		//цена открытия, максимальная, минимальная, цена закрытия
		СтруктураДанных = Новый Структура("timestamp, open, high, low, close");
		ДанныеТоргов = НайтиСтроки(Объект.trades, Новый Структура("server, Pair", server, pair));
		i = ДанныеТоргов.Количество();
		Пока i > 0 Цикл
			Сделка = ДанныеТоргов[i-1];
			i = i - 1;
			ТекущийПериод = Сделка.timestamp;
			Если ТекущийПериод < ПараметрыПары.last_timestamp Тогда
				Продолжить;
			КонецЕсли;
			ТекущиеМинуты = Минута(ТекущийПериод);
			ТекущиеСекунды = Секунда(ТекущийПериод);
			ОкрМинуты = ПериодСвечи * Цел(ТекущиеМинуты / ПериодСвечи);
			ТекущийПериод = ТекущийПериод - ТекущиеМинуты * 60 - ТекущиеСекунды + ОкрМинуты * 60;
			Если ТекущийПериод < ПараметрыПары.last_timestamp Тогда
				Продолжить;
			КонецЕсли;
			
			ЦенаСделки = Сделка.price;
			Если СтруктураДанных.timestamp <> ТекущийПериод Тогда
				Если СтруктураДанных.timestamp <> Неопределено Тогда
					Если СтруктураДанных.timestamp = ПараметрыПары.last_timestamp Тогда
						СтрокаТЧ = ПоследняяСвеча;
						СтрокаТЧ.disp = Ложь;
						СтрокаТЧ.calc = Ложь;
					Иначе
						СтрокаТЧ = Объект.charts.Добавить();
						СтрокаТЧ.trade_pair = trade_pair;
						СтрокаТЧ.candle_wide = ПериодСвечи;
					КонецЕсли;
					ПараметрыПары.last_timestamp = СтруктураДанных.timestamp;
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
				КонецЕсли;
				СтруктураДанных = Новый Структура("timestamp, open, high, low, close");
				СтруктураДанных.timestamp = ТекущийПериод;
				СтруктураДанных.open = ЦенаСделки;
			КонецЕсли;
			СтруктураДанных.close = ЦенаСделки;
			Если СтруктураДанных.high = Неопределено Или СтруктураДанных.high < ЦенаСделки Тогда
				СтруктураДанных.high = ЦенаСделки;
			КонецЕсли;
			Если СтруктураДанных.low = Неопределено Или СтруктураДанных.low > ЦенаСделки Тогда
				СтруктураДанных.low = ЦенаСделки;
			КонецЕсли;
			Если ПараметрыПары.high = 0 Или ПараметрыПары.high < ЦенаСделки Тогда
				ПараметрыПары.high = ЦенаСделки;
			КонецЕсли;
			Если ПараметрыПары.low = 0 Или ПараметрыПары.low > ЦенаСделки Тогда
				ПараметрыПары.low = ЦенаСделки;
			КонецЕсли;
		КонецЦикла;
		СтрокаТЧ = Неопределено;
		Если СтруктураДанных.timestamp = ПараметрыПары.last_timestamp Тогда
			СтрокаТЧ = ПоследняяСвеча;
			СтрокаТЧ.disp = Ложь;
		ИначеЕсли ЗначениеЗаполнено(ТекущийПериод) Тогда
			СтрокаТЧ = Объект.charts.Добавить();
			СтрокаТЧ.trade_pair = trade_pair;
			СтрокаТЧ.candle_wide = ПериодСвечи;
		КонецЕсли;
		Если СтрокаТЧ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
			ПараметрыПары.last_timestamp = СтруктураДанных.timestamp;
		КонецЕсли;
	ИначеЕсли server = "Poloniex" Тогда
		ЗаполнитьПоChartAPI = Ложь;
		Если ПериодСвечи >= 5 Тогда
			ЗаполнитьПоChartAPI = Истина;
		КонецЕсли;
		Если ЗаполнитьПоChartAPI Тогда
			Если ЗначениеЗаполнено(ПараметрыПары.last_timestamp) Тогда
				ВремяСтарта = ПараметрыПары.last_timestamp - ЧасовойПояс*60*60 - Дата("19700101000000");
			Иначе
				ВремяСтарта = ТекущаяДата() - ЧасовойПояс*60*60 - КоличествоСвечей*ПериодСвечи*60 - Дата("19700101000000");
			КонецЕсли;
			ВремяФиниша = ТекущаяДата() - ЧасовойПояс*60*60 - Дата("19700101000000");
			СтрокиСервера = Объект.site_api.НайтиСтроки(Новый Структура("method", server));
			НастройкаСервера = СтрокиСервера[0];
			Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_chart + "&currencyPair=" + pair + "&start=" + Формат(ВремяСтарта, "ЧГ=0")
			+ "&end=" + Формат(ВремяФиниша, "ЧГ=0")+ "&period=" + Формат(ПериодСвечи * 60, "ЧГ=0"));
			ТекущийПериод = Неопределено;
			//цена открытия, максимальная, минимальная, цена закрытия
			//"close"	0,06186217
			//"date"	1 495 652 700
			//"low"	0,06186001
			//"quoteVolume"	118,66785574
			//"open"	0,06206426
			//"weightedAverage"	0,06209241
			//"high"	0,06224879
			//"volume"	7,36837398
			Для i = 1 По Ответ.Количество() Цикл
				Сделка = Ответ[i-1];
				ТекущийПериод = Дата("19700101000000") + ЧасовойПояс*60*60 + Сделка.Получить("date");
				Если ТекущийПериод < ПараметрыПары.last_timestamp Тогда
					Продолжить;
				КонецЕсли;
				СтруктураДанных = Новый Структура("timestamp, open, high, low, close");
				СтруктураДанных.timestamp = ТекущийПериод;
				СтруктураДанных.open = Сделка.Получить("open");
				СтруктураДанных.high = Сделка.Получить("high");
				СтруктураДанных.low = Сделка.Получить("low");
				СтруктураДанных.close = Сделка.Получить("close");
				Если СтруктураДанных.timestamp = ПараметрыПары.last_timestamp Тогда
					СтрокаТЧ = ПоследняяСвеча;
					СтрокаТЧ.disp = Ложь;
					СтрокаТЧ.calc = Ложь;
				Иначе
					СтрокаТЧ = Объект.charts.Добавить();
					СтрокаТЧ.trade_pair = trade_pair;
					СтрокаТЧ.candle_wide = ПериодСвечи;
				КонецЕсли;
				ПараметрыПары.last_timestamp = СтруктураДанных.timestamp;
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
				Если ПараметрыПары.high = 0 Или ПараметрыПары.high < СтруктураДанных.high Тогда
					ПараметрыПары.high = СтруктураДанных.high;
				КонецЕсли;
				Если ПараметрыПары.low = 0 Или ПараметрыПары.low > СтруктураДанных.low Тогда
					ПараметрыПары.low = СтруктураДанных.low;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекущийПериод = Неопределено;
			//цена открытия, максимальная, минимальная, цена закрытия
			СтруктураДанных = Новый Структура("timestamp, open, high, low, close");
			ДанныеТоргов = Объект.trades.НайтиСтроки(Новый Структура("server, Pair", server, pair));
			i = ДанныеТоргов.Количество();
			Пока i > 0 Цикл
				Сделка = ДанныеТоргов[i-1];
				i = i - 1;
				ТекущийПериод = Сделка.timestamp;
				Если ТекущийПериод < ПараметрыПары.last_timestamp Тогда
					Продолжить;
				КонецЕсли;
				ТекущиеМинуты = Минута(ТекущийПериод);
				ТекущиеСекунды = Секунда(ТекущийПериод);
				ОкрМинуты = ПериодСвечи * Цел(ТекущиеМинуты / ПериодСвечи);
				ТекущийПериод = ТекущийПериод - ТекущиеМинуты * 60 - ТекущиеСекунды + ОкрМинуты * 60;
				Если ТекущийПериод < ПараметрыПары.last_timestamp Тогда
					Продолжить;
				КонецЕсли;
				
				ЦенаСделки = Сделка.price;
				Если СтруктураДанных.timestamp <> ТекущийПериод Тогда
					Если СтруктураДанных.timestamp <> Неопределено Тогда
						Если СтруктураДанных.timestamp = ПараметрыПары.last_timestamp Тогда
							СтрокаТЧ = ПоследняяСвеча;
							СтрокаТЧ.disp = Ложь;
						Иначе
							СтрокаТЧ = Объект.charts.Добавить();
							СтрокаТЧ.trade_pair = trade_pair;
							СтрокаТЧ.candle_wide = ПериодСвечи;
						КонецЕсли;
						ПараметрыПары.last_timestamp = СтруктураДанных.timestamp;
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
					КонецЕсли;
					СтруктураДанных = Новый Структура("timestamp, open, high, low, close");
					СтруктураДанных.timestamp = ТекущийПериод;
					СтруктураДанных.open = ЦенаСделки;
				КонецЕсли;
				СтруктураДанных.close = ЦенаСделки;
				Если СтруктураДанных.high = Неопределено Или СтруктураДанных.high < ЦенаСделки Тогда
					СтруктураДанных.high = ЦенаСделки;
				КонецЕсли;
				Если СтруктураДанных.low = Неопределено Или СтруктураДанных.low > ЦенаСделки Тогда
					СтруктураДанных.low = ЦенаСделки;
				КонецЕсли;
				Если ПараметрыПары.high = 0 Или ПараметрыПары.high < ЦенаСделки Тогда
					ПараметрыПары.high = ЦенаСделки;
				КонецЕсли;
				Если ПараметрыПары.low = 0 Или ПараметрыПары.low > ЦенаСделки Тогда
					ПараметрыПары.low = ЦенаСделки;
				КонецЕсли;
			КонецЦикла;
			СтрокаТЧ = Неопределено;
			Если СтруктураДанных.timestamp = ПараметрыПары.last_timestamp Тогда
				СтрокаТЧ = ПоследняяСвеча;
				СтрокаТЧ.disp = Ложь;
				СтрокаТЧ.calc = Ложь;
			ИначеЕсли ЗначениеЗаполнено(ТекущийПериод) Тогда
				СтрокаТЧ = Объект.charts.Добавить();
				СтрокаТЧ.trade_pair = trade_pair;
				СтрокаТЧ.candle_wide = ПериодСвечи;
			КонецЕсли;
			Если СтрокаТЧ <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
				ПараметрыПары.last_timestamp = СтруктураДанных.timestamp;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли server = "Bittrex" Тогда
		ЗаполнитьПоChartAPI = Истина;
		tickInterval = "";
		Если ПериодСвечи = 1 Тогда
			tickInterval = "oneMin";
		ИначеЕсли ПериодСвечи = 5 Тогда
			tickInterval = "fiveMin";
		ИначеЕсли ПериодСвечи = 30 Тогда
			tickInterval = "thirtyMin";
		ИначеЕсли ПериодСвечи = 60 Тогда
			tickInterval = "hour";
		ИначеЕсли ПериодСвечи = 60*24 Тогда
			tickInterval = "day";
		Иначе
			ЗаполнитьПоChartAPI = Ложь;
		КонецЕсли;
		Если ЗаполнитьПоChartAPI Тогда
			СтрокиСервера = Объект.site_api.НайтиСтроки(Новый Структура("method", server));
			НастройкаСервера = СтрокиСервера[0];
			Если ЗначениеЗаполнено(ПараметрыПары.last_timestamp) И ПараметрыПары.last_timestamp >= ТекущаяДата() - ПериодСвечи*60 - 600 Тогда
				//ВремяСтарта = ПараметрыПары.last_timestamp - ЧасовойПояс*60*60 - Дата("19700101000000");
				url_chart = СтрЗаменить(НастройкаСервера.url_chart, "GetTicks", "GetLatestTick");
			Иначе
				//ВремяСтарта = ТекущаяДата() - Дата("19700101000000") - 40000;//ЧасовойПояс*60*60 - КоличествоСвечей*ПериодСвечи*60
				url_chart = НастройкаСервера.url_chart;
			КонецЕсли;
			Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, url_chart + "?marketName=" + pair + "&tickInterval=" + tickInterval);// + "&_=" + Формат(ВремяСтарта, "ЧГ=0")
			//ВремяФиниша = ТекущаяДата() - ЧасовойПояс*60*60 - Дата("19700101000000");
			Если Ответ = Ложь Или Ответ = Неопределено Или Ответ.Получить("success") = Ложь Тогда
				Возврат ПараметрыПары;
			Иначе
				Ответ = Ответ.Получить("result");
			КонецЕсли;
			Если Ответ[0] = Неопределено Тогда
				Возврат ПараметрыПары;
			КонецЕсли;
			ТекущийПериод = Неопределено;
			//цена открытия, максимальная, минимальная, цена закрытия
			//BV: 13.14752793,          // base volume
			//C: 0.000121,              // close
			//H: 0.00182154,            // high
			//L: 0.0001009,             // low
			//O: 0.00182154,            // open
			//T: "2017-07-16T23:00:00", // timestamp
			//V: 68949.3719684          // 24h volume
			НачПоз = Мин(Ответ.Количество(),Объект.КолСвечей);
			КоррПоз = Ответ.Количество() - НачПоз;
			Для i = 1 По НачПоз Цикл
				Сделка = Ответ[i-1+КоррПоз];
				ТекущийПериод = ПолучитьДату(Сделка.Получить("T"), server);
				Если ТекущийПериод < ПараметрыПары.last_timestamp Тогда
					Продолжить;
				КонецЕсли;
				СтруктураДанных = Новый Структура("timestamp, open, high, low, close");
				СтруктураДанных.timestamp = ТекущийПериод;
				СтруктураДанных.open = Сделка.Получить("O");
				СтруктураДанных.high = Сделка.Получить("H");
				СтруктураДанных.low = Сделка.Получить("L");
				СтруктураДанных.close = Сделка.Получить("C");
				Если i = НачПоз И СтрокаПары <> Неопределено Тогда
					Если СтруктураДанных.high < СтрокаПары.last Тогда
						СтруктураДанных.high = СтрокаПары.last;
					КонецЕсли;
					Если СтруктураДанных.low > СтрокаПары.last Тогда
						СтруктураДанных.low = СтрокаПары.last;
					КонецЕсли;
				КонецЕсли;
				Если СтруктураДанных.timestamp = ПараметрыПары.last_timestamp Тогда
					СтрокаТЧ = ПоследняяСвеча;
					СтрокаТЧ.disp = Ложь;
					СтрокаТЧ.calc = Ложь;
				Иначе
					СтрокаТЧ = Объект.charts.Добавить();
					СтрокаТЧ.trade_pair = trade_pair;
					СтрокаТЧ.candle_wide = ПериодСвечи;
				КонецЕсли;
				ПараметрыПары.last_timestamp = СтруктураДанных.timestamp;
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
				Если ПараметрыПары.high = 0 Или ПараметрыПары.high < СтруктураДанных.high Тогда
					ПараметрыПары.high = СтруктураДанных.high;
				КонецЕсли;
				Если ПараметрыПары.low = 0 Или ПараметрыПары.low > СтруктураДанных.low Тогда
					ПараметрыПары.low = СтруктураДанных.low;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекущийПериод = Неопределено;
			//цена открытия, максимальная, минимальная, цена закрытия
			СтруктураДанных = Новый Структура("timestamp, open, high, low, close");
			ДанныеТоргов = Объект.trades.НайтиСтроки(Новый Структура("server, Pair", server, pair));
			i = ДанныеТоргов.Количество();
			Пока i > 0 Цикл
				Сделка = ДанныеТоргов[i-1];
				i = i - 1;
				ТекущийПериод = Сделка.timestamp;
				Если ТекущийПериод < ПараметрыПары.last_timestamp Тогда
					Продолжить;
				КонецЕсли;
				ТекущиеМинуты = Минута(ТекущийПериод);
				ТекущиеСекунды = Секунда(ТекущийПериод);
				ОкрМинуты = ПериодСвечи * Цел(ТекущиеМинуты / ПериодСвечи);
				ТекущийПериод = ТекущийПериод - ТекущиеМинуты * 60 - ТекущиеСекунды + ОкрМинуты * 60;
				Если ТекущийПериод < ПараметрыПары.last_timestamp Тогда
					Продолжить;
				КонецЕсли;
				
				ЦенаСделки = Сделка.price;
				Если СтруктураДанных.timestamp <> ТекущийПериод Тогда
					Если СтруктураДанных.timestamp <> Неопределено Тогда
						Если СтруктураДанных.timestamp = ПараметрыПары.last_timestamp Тогда
							СтрокаТЧ = ПоследняяСвеча;
							СтрокаТЧ.disp = Ложь;
							СтрокаТЧ.calc = Ложь;
						Иначе
							СтрокаТЧ = Объект.charts.Добавить();
							СтрокаТЧ.trade_pair = trade_pair;
							СтрокаТЧ.candle_wide = ПериодСвечи;
						КонецЕсли;
						ПараметрыПары.last_timestamp = СтруктураДанных.timestamp;
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
					КонецЕсли;
					СтруктураДанных = Новый Структура("timestamp, open, high, low, close");
					СтруктураДанных.timestamp = ТекущийПериод;
					СтруктураДанных.open = ЦенаСделки;
				КонецЕсли;
				СтруктураДанных.close = ЦенаСделки;
				Если СтруктураДанных.high = Неопределено Или СтруктураДанных.high < ЦенаСделки Тогда
					СтруктураДанных.high = ЦенаСделки;
				КонецЕсли;
				Если СтруктураДанных.low = Неопределено Или СтруктураДанных.low > ЦенаСделки Тогда
					СтруктураДанных.low = ЦенаСделки;
				КонецЕсли;
				Если ПараметрыПары.high = 0 Или ПараметрыПары.high < ЦенаСделки Тогда
					ПараметрыПары.high = ЦенаСделки;
				КонецЕсли;
				Если ПараметрыПары.low = 0 Или ПараметрыПары.low > ЦенаСделки Тогда
					ПараметрыПары.low = ЦенаСделки;
				КонецЕсли;
			КонецЦикла;
			СтрокаТЧ = Неопределено;
			Если СтруктураДанных.timestamp = ПараметрыПары.last_timestamp Тогда
				СтрокаТЧ = ПоследняяСвеча;
				СтрокаТЧ.disp = Ложь;
			ИначеЕсли ЗначениеЗаполнено(ТекущийПериод) Тогда
				СтрокаТЧ = Объект.charts.Добавить();
				СтрокаТЧ.trade_pair = trade_pair;
				СтрокаТЧ.candle_wide = ПериодСвечи;
			КонецЕсли;
			Если СтрокаТЧ <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
				ПараметрыПары.last_timestamp = СтруктураДанных.timestamp;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли server = "Bitfinex" Тогда
		ЗаполнитьПоChartAPI = Истина;
		tickInterval = "";
		Если ПериодСвечи = 1 Тогда
			tickInterval = "1m";
		ИначеЕсли ПериодСвечи = 5 Тогда
			tickInterval = "5m";
		ИначеЕсли ПериодСвечи = 15 Тогда
			tickInterval = "15m";
		ИначеЕсли ПериодСвечи = 30 Тогда
			tickInterval = "30m";
		ИначеЕсли ПериодСвечи = 60 Тогда
			tickInterval = "1h";
		ИначеЕсли ПериодСвечи = 60*3 Тогда
			tickInterval = "3h";
		ИначеЕсли ПериодСвечи = 60*6 Тогда
			tickInterval = "6h";
		ИначеЕсли ПериодСвечи = 60*12 Тогда
			tickInterval = "12h";
		ИначеЕсли ПериодСвечи = 60*24 Тогда
			tickInterval = "1D";
		Иначе
			ЗаполнитьПоChartAPI = Ложь;
		КонецЕсли;
		СтрокиСервера = Объект.site_api.НайтиСтроки(Новый Структура("method", server));
		НастройкаСервера = СтрокиСервера[0];
		//*******
		Если ЗначениеЗаполнено(ПараметрыПары.last_timestamp) Тогда
			ВремяСтарта = ПараметрыПары.last_timestamp - ЧасовойПояс*60*60 - Дата("19700101000000");
		Иначе
			ВремяСтарта = ТекущаяДата() - ЧасовойПояс*60*60 - КоличествоСвечей*ПериодСвечи*60 - Дата("19700101000000");
		КонецЕсли;
		ВремяФиниша = ТекущаяДата() - ЧасовойПояс*60*60 - Дата("19700101000000");
		СтрокиСервера = Объект.site_api.НайтиСтроки(Новый Структура("method", server));
		НастройкаСервера = СтрокиСервера[0];
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("limit", Формат(200, "ЧГ=0"));
		ПараметрыЗапроса.Вставить("start", Формат(ВремяСтарта, "ЧГ=0"));
		ПараметрыЗапроса.Вставить("end", Формат(ВремяФиниша, "ЧГ=0"));
		//ПараметрыЗапроса.Вставить("sort", "-1");
		Если ЗначениеЗаполнено(ПараметрыПары.last_timestamp) И ПараметрыПары.last_timestamp >= ТекущаяДата() - ПериодСвечи*60 - 600 Тогда
			url_chart = НастройкаСервера.url_chart + ":" + tickInterval + ":" + pair + "/last";
			ОтветСервера = ЗапросНаБиржу(НастройкаСервера.url_server, url_chart, ПараметрыЗапроса);
			Если ОтветСервера = Ложь Или ОтветСервера = Неопределено Тогда
				Возврат ПараметрыПары;
			КонецЕсли;
			Ответ = Новый Массив;
			Ответ.Добавить(ОтветСервера);
		Иначе
			url_chart = НастройкаСервера.url_chart + ":" + tickInterval + ":" + pair + "/hist";
			Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, url_chart, ПараметрыЗапроса);
		КонецЕсли;
		//ВремяФиниша = ТекущаяДата() - ЧасовойПояс*60*60 - Дата("19700101000000");
		Если Ответ = Ложь Или Ответ = Неопределено Тогда
			Возврат ПараметрыПары;
		КонецЕсли;
		Если Ответ[0] = Неопределено Тогда
			Возврат ПараметрыПары;
		КонецЕсли;
		ТекущийПериод = Неопределено;
		//НачПоз = Мин(Ответ.Количество(),Объект.КолСвечей);
		//КоррПоз = Ответ.Количество() - НачПоз;
		НачПоз = Ответ.Количество();
		КоррПоз = 0;
		Для i = 1 По НачПоз Цикл
			Сделка = Ответ[НачПоз-i];
			ТекущийПериод = ПолучитьДату(Сделка[0], server);
			Если ТекущийПериод < ПараметрыПары.last_timestamp Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанных = Новый Структура("timestamp, open, high, low, close, vol");
			СтруктураДанных.timestamp = ТекущийПериод;
			СтруктураДанных.open = Сделка[1];
			СтруктураДанных.high = Сделка[3];
			СтруктураДанных.low = Сделка[4];
			СтруктураДанных.close = Сделка[2];
			СтруктураДанных.vol = Сделка[5];
			Если СтруктураДанных.timestamp = ПараметрыПары.last_timestamp Тогда
				СтрокаТЧ = ПоследняяСвеча;
				СтрокаТЧ.disp = Ложь;
				СтрокаТЧ.calc = Ложь;
			Иначе
				СтрокаТЧ = Объект.charts.Добавить();
				СтрокаТЧ.trade_pair = trade_pair;
				СтрокаТЧ.candle_wide = ПериодСвечи;
			КонецЕсли;
			ПараметрыПары.last_timestamp = СтруктураДанных.timestamp;
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанных);
			Если ПараметрыПары.high = 0 Или ПараметрыПары.high < СтруктураДанных.high Тогда
				ПараметрыПары.high = СтруктураДанных.high;
			КонецЕсли;
			Если ПараметрыПары.low = 0 Или ПараметрыПары.low > СтруктураДанных.low Тогда
				ПараметрыПары.low = СтруктураДанных.low;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ПараметрыПары;
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//Сообщить("ПередЗакрытием" + Объект.Номер);
	//Объект.Номер = Объект.Номер + 1;
	Объект.trades.Очистить();
	Объект.charts.Очистить();
	Объект.asks.Очистить();
	Объект.bids.Очистить();
	Объект.ХранилищеДанных = 1;
	Объект.ХранилищеПар = 1;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	//Сообщить("ПриСохраненииДанныхВНастройкахНаСервере" + Объект.Номер);
	//Объект.Номер = Объект.Номер + 1;
	Настройки.Вставить("Объект.ХранилищеДанных", Объект.site_api.Выгрузить());
	Настройки.Вставить("Объект.ХранилищеПар", Объект.pairs.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	//Сообщить("ПриЗагрузкеДанныхИзНастроекНаСервере" + Объект.Номер);
	//Объект.Номер = Объект.Номер + 1;
	ХранилищеДанных = Настройки.Получить("Объект.ХранилищеДанных");
	Если ТипЗнч(ХранилищеДанных) = Тип("ТаблицаЗначений") Тогда
		Объект.site_api.Загрузить(Настройки.Получить("Объект.ХранилищеДанных"));
	КонецЕсли;
	
	ХранилищеПар = Настройки.Получить("Объект.ХранилищеПар");
	Если ТипЗнч(ХранилищеПар) = Тип("ТаблицаЗначений") Тогда
		Таблица_pairs = Настройки.Получить("Объект.ХранилищеПар");
		Если Таблица_pairs.Колонки.Найти("ИдентификаторСтрокиTrade") <> Неопределено Тогда
			Таблица_pairs.ЗаполнитьЗначения(0, "ИдентификаторСтрокиTrade");
		КонецЕсли;
		Если Таблица_pairs.Колонки.Найти("last_timestamp") <> Неопределено Тогда
			Таблица_pairs.ЗаполнитьЗначения(0, "last_timestamp");
		КонецЕсли;
		//Таблица_pairs.ЗаполнитьЗначения(Дата("00010101000000"), "last_timestamp");
		Объект.pairs.Загрузить(Таблица_pairs);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура site_apiПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования = Истина Тогда
		Возврат;
	КонецЕсли;
	ТекущийМетод = Элемент.ТекущиеДанные.method;
	Если Не ЗначениеЗаполнено(ТекущийМетод) Тогда
		Сообщить("Не указан метод API!", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	Иначе
		НайденныеСтроки = Объект.site_api.НайтиСтроки(Новый Структура("method", ТекущийМетод));
		Если НайденныеСтроки.Количество() > 1 Тогда
			Сообщить("Указанный метод API уже есть!", СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЛокальныйЧасовойПояс()
	лЧасовойПояс = Ложь;
	//Попытка
	//	scr = Новый COMОбъект("MSScriptControl.ScriptControl");
	//	scr.language = "javascript";
	//	лСкрипт = "function tZone() 
	//	|    {
	//	|      nzone =  new Date().getTimezoneOffset()/60*-1;
	//	|      return(nzone); 
	//	|}";
	//	scr.AddCode(лСкрипт);     
	//	лЧасовойПояс = число(scr.Run("tZone"));
	//Исключение
	//	Сообщить("Не удалось определить часовой пояс");
	//КонецПопытки;
	ТекущееВремя = ТекущаяДата();
	лЧасовойПояс = (ТекущееВремя - УниверсальноеВремя(ТекущееВремя)) / (60*60);
	
	Возврат лЧасовойПояс;
КонецФункции

&НаКлиенте
Функция НайтиСтроки(Таблица, СтруктураПоиска)
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТаб Из Таблица Цикл
		УсловияВыполнены = Истина;
		Для Каждого ЭлементПоиска Из СтруктураПоиска Цикл
			Если СтрокаТаб[ЭлементПоиска.Ключ] <> ЭлементПоиска.Значение Тогда
				УсловияВыполнены = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если УсловияВыполнены Тогда
			МассивСтрок.Добавить(СтрокаТаб);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСтрок;
КонецФункции

&НаКлиенте
Функция ОписаниеОрдера(СтруктураОрдера)
	Описание = "ордер на ";
	Если СтруктураОрдера.type = "buy" Тогда
		Описание = Описание + "покупку ";
	ИначеЕсли СтруктураОрдера.type = "sell" Тогда
		Описание = Описание + "продажу ";
	КонецЕсли;
	МассивВалют = СтрРазделить(СтруктураОрдера.Pair, "-_");
	Цена = Формат(Объект.price, "ЧН=0; ЧГ=3,0");
	Количество = Формат(Объект.amount, "ЧН=0; ЧГ=0");
	Если МассивВалют.Количество() = 2 Тогда
		Описание = Описание + Количество + " " + МассивВалют[1] + " по цене " + Цена + " " + МассивВалют[0];
	Иначе
		Описание = Описание + Количество + " " + СтруктураОрдера.Pair + " по цене " + Цена;
	КонецЕсли;
	Возврат Описание;
КонецФункции

&НаКлиенте
Процедура ВыставитьОрдер(Команда)
	ПараметрыВыполнения = Новый Структура("server, Pair, type, amount, price", Объект.server, Объект.Pair, Объект.type, Объект.amount, Объект.price);
   ПоказатьВопрос(Новый ОписаниеОповещения("ПредупредитьОбВыставленииОрдераЗавершение", ЭтотОбъект, ПараметрыВыполнения), "Создать " + ОписаниеОрдера(ПараметрыВыполнения) + " ?",РежимДиалогаВопрос.ДаНет);	 
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбВыставленииОрдераЗавершение(Ответ, Параметры) Экспорт
 
	ОтказОтУдаления = (Ответ = КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СтрокиApi = НайтиСтроки(Объект.site_api, Новый Структура("method", Параметры.server));
		Если СтрокиApi.Количество() = 1 Тогда
			НастройкаСервера = СтрокиApi[0];
			Ответ = Неопределено;
			ПараметрыЗапроса = Новый Соответствие;
			Если Параметры.server = "Bittrex" Тогда
				ПараметрыЗапроса.Вставить("marketName", Параметры.Pair);
				ПараметрыЗапроса.Вставить("orderType", "LIMIT");
				ПараметрыЗапроса.Вставить("quantity", Формат(Параметры.amount, "ЧРД=.; ЧН=0; ЧГ=0"));
				ПараметрыЗапроса.Вставить("rate", Формат(Параметры.price, "ЧРД=.; ЧН=0; ЧГ=0"));
				ПараметрыЗапроса.Вставить("timeInEffect", "GOOD_TIL_CANCELLED");
				ПараметрыЗапроса.Вставить("conditionType", "NONE");
				ПараметрыЗапроса.Вставить("target", "0");
			ИначеЕсли Параметры.server = "BTC-E" Или Параметры.server = "Yobit" Тогда
				ПараметрыЗапроса.Вставить("pair", Параметры.Pair);
				ПараметрыЗапроса.Вставить("type", Параметры.type);
				ПараметрыЗапроса.Вставить("rate", Формат(Параметры.price, "ЧРД=.; ЧН=0; ЧГ=0"));
				ПараметрыЗапроса.Вставить("amount", Формат(Параметры.amount, "ЧРД=.; ЧН=0; ЧГ=0"));
			ИначеЕсли Параметры.server = "Poloniex" Тогда
				ПараметрыЗапроса.Вставить("currencyPair", Параметры.Pair);
				ПараметрыЗапроса.Вставить("rate", Формат(Параметры.price, "ЧРД=.; ЧН=0; ЧГ=0"));
				ПараметрыЗапроса.Вставить("amount", Формат(Параметры.amount, "ЧРД=.; ЧН=0; ЧГ=0"));
			ИначеЕсли Параметры.server = "Bitfinex" Тогда
				ПараметрыЗапроса.Вставить("symbol", Сред(Параметры.Pair,2));
				ПараметрыЗапроса.Вставить("amount", Формат(Параметры.amount, "ЧРД=.; ЧН=0; ЧГ=0"));
				ПараметрыЗапроса.Вставить("price", Формат(Параметры.price, "ЧРД=.; ЧН=0; ЧГ=0"));
				ПараметрыЗапроса.Вставить("exchange", "bitfinex");
				ПараметрыЗапроса.Вставить("side", Параметры.type);
				ПараметрыЗапроса.Вставить("type", "exchange limit");
			КонецЕсли;
			//https://bittrex.com/api/v2.0/key/market/TradeBuy?marketName=BTC-LTC&orderType=LIMIT&quantity=5000&rate=.00000012&timeInEffect=GOOD_TIL_CANCELLED&conditionType=NONE&target=0
			Если Параметры.type = "buy" Тогда
				Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_buylimit, ПараметрыЗапроса, НастройкаСервера.apikey, НастройкаСервера.apisecret, НастройкаСервера.method);
			ИначеЕсли Параметры.type = "sell" Тогда
				Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_selllimit, ПараметрыЗапроса, НастройкаСервера.apikey, НастройкаСервера.apisecret, НастройкаСервера.method);
			КонецЕсли;
			Если ТипЗнч(Ответ) = Тип("Соответствие") Тогда
				Если Ответ.Получить("success") = Истина Тогда
					ПоказатьПредупреждение(,"Ордер успешно выставлен", 2);
					ОбновитьСвоиОрдера();
				Иначе
					ПоказатьПредупреждение(,"Произошла ошибка при выставлении ордера: " + Ответ.Получить("message") + Ответ.Получить("error"), 4);
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(,"Произошла ошибка при выставлении ордера", 2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
   
КонецПроцедуры

&НаКлиенте
Процедура ordersПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПредупредитьОбУдаленииСтроки("orders", Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.tid);
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбУдаленииСтроки(ТабличнаяЧасть, НомерСтроки, tid)
   
   ПоказатьВопрос(Новый ОписаниеОповещения("ПредупредитьОбУдаленииСтрокиЗавершение", ЭтотОбъект, 
                   Новый Структура("ТабличнаяЧасть, НомерСтроки, tid", ТабличнаяЧасть, НомерСтроки, tid)),
                   "Ордер " + tid + " будет отменён. Продолжить?",РежимДиалогаВопрос.ДаНет);	 
   
КонецПроцедуры                       
 
&НаКлиенте
Процедура ПредупредитьОбУдаленииСтрокиЗавершение(Ответ, Параметры) Экспорт
 
	ОтказОтУдаления = (Ответ = КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СтрокаТЧ = Объект[Параметры.ТабличнаяЧасть].Получить(Параметры.НомерСтроки -1);
		Если СтрокаТЧ.tid = Параметры.tid Тогда
			СтрокиApi = НайтиСтроки(Объект.site_api, Новый Структура("method", СтрокаТЧ.server));
			Если СтрокиApi.Количество() = 1 Тогда
				НастройкаСервера = СтрокиApi[0];
				ПараметрыЗапроса = Новый Соответствие;
				Если НастройкаСервера.method = "Bittrex" Тогда
					ПараметрыЗапроса.Вставить("orderid", Параметры.tid);
				ИначеЕсли НастройкаСервера.method = "BTC-E" Или Параметры.server = "Yobit" Тогда
					ПараметрыЗапроса.Вставить("order_id", Параметры.tid);
				ИначеЕсли НастройкаСервера.method = "Poloniex" Тогда
					ПараметрыЗапроса.Вставить("orderNumber", Параметры.tid);
				КонецЕсли;
				Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_cancelorder, ПараметрыЗапроса, НастройкаСервера.apikey, НастройкаСервера.apisecret, НастройкаСервера.method);
				Если ТипЗнч(Ответ) = Тип("Соответствие") Тогда
					Если Ответ.Получить("success") = Истина Или Ответ.Получить("success") = 1 Тогда
						Объект[Параметры.ТабличнаяЧасть].Удалить(Параметры.НомерСтроки -1);
						ПоказатьПредупреждение(,"Ордер отменён", 5);
					Иначе
						ПоказатьПредупреждение(,"Произошла ошибка при отмене ордера: " + Ответ.Получить("message") + Ответ.Получить("error"), 4);
					КонецЕсли;
				Иначе
					ПоказатьПредупреждение(,"Произошла ошибка при отмене ордера", 5);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
   
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьAPI(Команда)
	Для Каждого СтрокаТаб Из ПараметрыСерверов Цикл
		СтруктураСтроки = СтрокаТаб.Значение;
		СтрокиТЧ = НайтиСтроки(Объект.site_api, Новый Структура("method", СтруктураСтроки.method));
		Если СтрокиТЧ.Количество() = 0 Тогда
			СтрокиТЧ.Добавить(Объект.site_api.Добавить());
		КонецЕсли;
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Для Каждого СтруктураКолонки Из СтруктураСтроки Цикл
				СтрокаТЧ[СтруктураКолонки.Ключ] = СтруктураКолонки.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстHTML()

	Текст = "
	|<html> 
	|<head> 
	|<title>Мой заголовок</title> 
	|</head>  
	|<body>
    |<script type=""text/javascript"" src=""https://www.gstatic.com/charts/loader.js""></script>
	|<script type=""text/javascript""> 
	|
	|var Form1C;
    |
	|function SetForm1C(aForm1C)
	|{
	|	Form1C = aForm1C;
	|};
    |
	|// Для вызова 1С из скрипта
	|function Message1C(MessageText)
	|{
	|	Form1C.ВывестиСообщение(MessageText);
	|};
    |
	|// Для вызова из 1С
	|function zako() 
	|{ 
	|	return alert( 'привет, мир!' ); 
	|}; 
    |  google.charts.load('current', {'packages':['corechart']});
    |  google.charts.setOnLoadCallback(drawChart);
	|  function drawChart() {
	|  };
    |
	|</script> 
	|<div id=""chart_div"" style=""width: 100%; height: 100%""></div>
	|<!-- А это вызов функции 1С из скрипта /> -->
	|<input type = ""button"" onclick = ""Message1C('пока, мир!')"" value = ""1С"" />
    |
	|</body> 
	|</html>
	|";	
	
	Возврат Текст;

КонецФункции

&НаКлиенте
Процедура КомОбновитьОрдера(Команда)
	ОбновитьСвоиОрдера();
	ОбновитьИсториюОрдеров();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТипОрдера()
	Перем ВремяСервера;
	Ответ = Ложь;
	Для Каждого СтруктураДанных Из Объект.orders Цикл
		СтруктураПоиска = Новый Структура("server, Pair, price", СтруктураДанных.server,СтруктураДанных.Pair,СтруктураДанных.price);
		СтрокиТЧ = НайтиСтроки(Объект.orderhistory, СтруктураПоиска);
		Если СтрокиТЧ.Количество() > 0 Тогда
			ТекущаяСтрока = СтрокиТЧ[СтрокиТЧ.Количество()-1];
			//ТекущаяСтрока      = СтрокиТЧ[0];
			Если ТекущаяСтрока.type = "LIMIT_BUY" Тогда
				price              = СтруктураДанных.price+((СтруктураДанных.price/100)*0.4);					
				Объект.type        = "sell";
				Объект.server      = СтруктураДанных.server;
				Объект.Pair        = СтруктураДанных.Pair;
				Объект.price       = price;
				Объект.amount      = СтруктураДанных.amount;
				ПараметрыВыполнения = Новый Структура("server, Pair, type, amount, price", СтруктураДанных.server, СтруктураДанных.Pair, "sell", СтруктураДанных.amount, price);               
				Ответ = ВыставитьОрдерНаПокупкуПродажу(ПараметрыВыполнения);
			КонецЕсли;
			Если Ответ Тогда 
				Объект.orders.Удалить(СтруктураДанных);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ДлительностьСвечи()
	
	ДлинаСвечиBittrex = "five";
	
	Если  Объект.ДлитСвечи = 5 Тогда
		 ДлинаСвечиBittrex = "fiveMin";
	ИначеЕсли Объект.ДлитСвечи = 1 Тогда
		 ДлинаСвечиBittrex = "oneMin";
	ИначеЕсли Объект.ДлитСвечи = 2 Тогда
		 ДлинаСвечиBittrex = "oneMin";
	ИначеЕсли Объект.ДлитСвечи = 3 Тогда
		 ДлинаСвечиBittrex = "oneMin";
	КонецЕсли;
	
	Возврат ДлинаСвечиBittrex;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьданныеДляГрафика(ТекущаяПара,СписокСделок) 
	
	Если ЧасовойПояс = Неопределено Тогда
		ЧасовойПояс = ПолучитьЛокальныйЧасовойПояс();
	КонецЕсли;

	trade_pair = ТекущаяПара.server + "_" + ТекущаяПара.Pair;
    ДлитСвечи  = Объект.ДлитСвечи;
	
	Для i = 1 По СписокСделок.Количество() Цикл 
					
	Сделка  = СписокСделок[i-1];
	СтроковаяДата = Сделка.Получить("T");
	ВрСтр = СтрЗаменить(Сделка.Получить("T"), "T", "");
	ВрСтр = СтрЗаменить(ВрСтр, ":", "");
	ВрСтр = СтрЗаменить(ВрСтр, "-", "");
	ПозТоч = СтрНайти(ВрСтр, ".");
	Если ПозТоч > 0 Тогда
		ВрСтр = Лев(ВрСтр, ПозТоч-1);
	КонецЕсли;

	timestamp =	Дата(ВрСтр) + ЧасовойПояс * 60 * 60;
	Если i = 1  Тогда
		last_timestamp = ?(Минута(timestamp)%ДлитСвечи=1,timestamp+1*60,timestamp);
	КонецЕсли;
	
	Если ДлитСвечи > 1 и не ДлитСвечи = 5 Тогда
		Если timestamp < last_timestamp  Тогда 
			Продолжить;
		КонецЕсли;
	   Если timestamp > last_timestamp  Тогда
			Пока last_timestamp < timestamp Цикл
				last_timestamp = last_timestamp + ДлитСвечи*60;
			КонецЦикла;	
		Продолжить;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеГрафика = Объект.charts.НайтиСтроки(Новый Структура("trade_pair,timestamp", trade_pair,timestamp));
	Если ДанныеГрафика.Количество() = 0 Тогда
		
	СтрокаТЧ = Объект.charts.Добавить();	
	СтрокаТЧ.high  = Сделка.Получить("H");
	СтрокаТЧ.open  = Сделка.Получить("O");
	СтрокаТЧ.low   = Сделка.Получить("L");
	СтрокаТЧ.close = Сделка.Получить("C");	
	СтрокаТЧ.trade_pair   = trade_pair;
	СтрокаТЧ.timestamp    = timestamp;
	СтрокаТЧ.candle_wide  = Объект.ДлитСвечи;
	last_timestamp        = timestamp + ДлитСвечи*60;

	КонецЕсли;
КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура АнализТорговли(Данные, server, pair, trade_pair)
	//MACD Strategy
	//ВыгрузитьКолонки();

	SummUp   = 0;
	SummDown = 0;
	Max_d    = 0;
	Min_d    = 10000;
	avarange = 0;
	
	fastLength = 12;
	slowlength = 26;
	MACDLength = 9;
	RSILenght = 14;
	StochLenght = 14;
	SMAperiod = 3;
	smoothK = 3;
	fastema = 0;
	slowema = 0;
	TabGain = Новый Массив;
	TabLoss = Новый Массив;
	TabHigh = Новый Массив;
	TabLow = Новый Массив;
	TabDFast = Новый Массив;
	TabDSlow = Новый Массив;

	i = 0;
	Прошлыеданные = Неопределено;
	Для Каждого ТекущиеДанные Из Данные Цикл
		i = i + 1;
		Если ПрошлыеДанные = Неопределено Тогда
			ПрошлыеДанные = ТекущиеДанные;
			Если ТекущиеДанные.calc = Ложь Тогда
				ТекущиеДанные.fastema = ПрошлыеДанные.close;
				ТекущиеДанные.slowema = ПрошлыеДанные.close;
				ТекущиеДанные.macd = 0;
				ТекущиеДанные.Signal = 0;
			КонецЕсли;
		Иначе
			Если ТекущиеДанные.calc = Ложь Тогда
				ТекущиеДанные.fastema = ПрошлыеДанные.fastema;
				ТекущиеДанные.slowema = ПрошлыеДанные.slowema;
				ТекущиеДанные.macd = ПрошлыеДанные.macd;
			КонецЕсли;
		КонецЕсли;
		Если ТекущиеДанные.calc = Ложь Тогда
			Если ТекущиеДанные.close > Прошлыеданные.close Тогда
				ТекущиеДанные.Gain = ТекущиеДанные.close - Прошлыеданные.close;
			ИначеЕсли ТекущиеДанные.close < Прошлыеданные.close Тогда
				ТекущиеДанные.Loss = Прошлыеданные.close - ТекущиеДанные.close;
			КонецЕсли;
		КонецЕсли;
		Если i <= RSILenght Тогда
			AvgGain = РасчетМассива(ТекущиеДанные.Gain, TabGain, RSILenght, ?(ТекущиеДанные.calc=Ложь,1,0));
			AvgLoss = РасчетМассива(ТекущиеДанные.Loss, TabLoss, RSILenght, ?(ТекущиеДанные.calc=Ложь,1,0));
			AvgGain2 = AvgGain;
			AvgLoss2 = AvgLoss;
		Иначе
			//rsi
			AvgGain = ((ПрошлыеДанные.AvgGain * (RSILenght-1)) + ТекущиеДанные.Gain) / RSILenght;
			AvgLoss = ((ПрошлыеДанные.AvgLoss * (RSILenght-1)) + ТекущиеДанные.Loss) / RSILenght;
			//rsi_2
			alpha = 2 / (RSILenght+1);
			AvgGain2 = (ТекущиеДанные.Gain * alpha) + (1-alpha)*ПрошлыеДанные.AvgGain2;
			AvgLoss2 = (ТекущиеДанные.Loss * alpha) + (1-alpha)*ПрошлыеДанные.AvgLoss2;
			//rsi(ТекущиеДанные.close, RSILenght, Прошлыеданные.close, ТекущиеДанные.Gain
		КонецЕсли;
		//расчет stoch
		//Стохастик. считается по формуле: 100 * (close - lowest(low, length)) / (highest(high, length) - lowest(low, length))			
		Max_d = РасчетМассива(ТекущиеДанные.high, TabHigh, StochLenght, 2);
		Min_d = РасчетМассива(ТекущиеДанные.low, TabLow, StochLenght, 3);
		Если Max_d = Min_d Тогда
			Max_d = Min_d + 1;
		КонецЕсли;
		DFast  = 100 * ((ТекущиеДанные.Close-Min_d)/(Max_d-Min_d));
		DFast = РасчетМассива(DFast, TabDFast, smoothK, 1);
		
		DSlow = РасчетМассива(DFast, TabDSlow, SMAperiod, ?(ТекущиеДанные.calc=Ложь,1,0));
		
		Если ТекущиеДанные.calc = Истина Тогда
			ПрошлыеДанные = ТекущиеДанные;
			Продолжить;
		КонецЕсли;
		ТекущиеДанные.Signal = macd(ТекущиеДанные.close, ТекущиеДанные.macd, ТекущиеДанные.fastema, ТекущиеДанные.slowema, fastLength, slowlength, MACDLength);
		ТекущиеДанные.Signal = (Прошлыеданные.Signal + ТекущиеДанные.Signal) / 2; //сглаживание на 1
		ТекущиеДанные.AvgGain = AvgGain;
		ТекущиеДанные.AvgLoss = AvgLoss;
		ТекущиеДанные.AvgGain2 = AvgGain2;
		ТекущиеДанные.AvgLoss2 = AvgLoss2;
		
		ТекущиеДанные.Hist = ТекущиеДанные.macd - ТекущиеДанные.Signal;
		Если ТекущиеДанные.Hist > 0 Тогда 
			ТекущиеДанные.max_hist = Макс(ТекущиеДанные.Hist,Прошлыеданные.max_hist);
		ИначеЕсли ТекущиеДанные.Hist < 0 Тогда
			ТекущиеДанные.max_hist = Мин(ТекущиеДанные.Hist,Прошлыеданные.max_hist);
		КонецЕсли;
		
		ТекущиеДанные.RS    = ?(ТекущиеДанные.AvgLoss=0,0,ТекущиеДанные.AvgGain/ТекущиеДанные.AvgLoss);
		ТекущиеДанные.RSI   = 100-100/(1+ТекущиеДанные.RS);
		//rsi_2
		RS_2    = ?(ТекущиеДанные.AvgLoss2=0,0,ТекущиеДанные.AvgGain2/ТекущиеДанные.AvgLoss2);
		ТекущиеДанные.RSI2   = 100-100/(1+RS_2);
		//расчет stoch
		ТекущиеДанные.DFast = DFast;
		ТекущиеДанные.DSlow = DSlow;
		
		ТекущиеДанные.calc = Истина;
		ПрошлыеДанные = ТекущиеДанные;
	КонецЦикла;							
	АнализДанных(Данные, server, pair,trade_pair);
КонецПроцедуры

//plot(pine_rsi(close, 7))
&НаКлиенте
Функция rsi(x, y, previous_x, previous_u, previous_d)
    u = max(x - previous_x, 0);// upward change
    d = max(previous_x - x, 0); // downward change
    rs = rma(u, y, previous_u) / rma(d, y, previous_d);
    res = 100 - 100 / (1 + rs);
	Возврат res;
КонецФункции

&НаКлиенте
Функция rma(x, y, previous)
	alpha = y;
    sum = 0;
    sum = alpha * x + (1 - alpha) * previous;
	Возврат sum;
КонецФункции

&НаКлиенте
Процедура АнализДанных(Данные, server, pair, trade_pair)
	
	Процент = 0;
	Bull    = Ложь;
	BEAR    = Ложь;
	Ответ   = Ложь;
	//Данные = Объект.charts.НайтиСтроки(Новый Структура("trade_pair", trade_pair));	
	i = Данные.Количество();
	
	//расчет macd
	//@version=3
	//strategy("MACD Strategy", overlay=true)

	//delta = MACD - aMACD

	//if (crossover(delta, 0))
	//    strategy.entry("MacdLE", strategy.long, comment="MacdLE")

	//if (crossunder(delta, 0))
	//    strategy.entry("MacdSE", strategy.short, comment="MacdSE")

	//plot(strategy.equity, title="equity", color=red, linewidth=2, style=areabr)
	
	////@version=3
	//strategy("RSI Strategy", overlay=true)
	//length = input( 14 )
	//overSold = input( 30 )
	//overBought = input( 70 )
	//price = close

	//vrsi = rsi(price, length)

	//if (not na(vrsi))
	//    if (crossover(vrsi, overSold))
	//        strategy.entry("RsiLE", strategy.long, comment="RsiLE")
	//    if (crossunder(vrsi, overBought))
	//        strategy.entry("RsiSE", strategy.short, comment="RsiSE")

	////plot(strategy.equity, title="equity", color=red, linewidth=2, style=areabr)	
	
	//Алгоритм: если macd больше signal на 90% и прошлого macd, если SlowStoch меньше 65, прошлый SlowStoch больше 15 и текущий SlowStoch больше прошлого - купля
	//доп условие 15 <= RSI(текущий) <= 65
	
	//Достаточно ли информациии для принятия решения
	Если Объект.charts.Количество() > 40 Тогда	
		Пока i > 1 Цикл		
			ТекущиеДанные = Данные[i-1];
			Прошлыеданные = Данные[i-2];
			Если ТекущиеДанные.Hist > 3 И ПрошлыеДанные.Hist <= ТекущиеДанные.Hist И
				 ТекущиеДанные.RSI2 > 70 И ПрошлыеДанные.RSI2 <= ТекущиеДанные.RSI2 И
				 ТекущиеДанные.Macd > 20 И ТекущиеДанные.DSlow > 70 Тогда
				ТекущиеДанные.sell = Истина;
			ИначеЕсли ТекущиеДанные.RSI2 < 30 И ПрошлыеДанные.RSI2 >= ТекущиеДанные.RSI2 И
				 ТекущиеДанные.Macd < 0 И ТекущиеДанные.Hist < 0 И
				 ТекущиеДанные.DSlow < 30 И ТекущиеДанные.DFast > ТекущиеДанные.DSlow И ПрошлыеДанные.DFast < ПрошлыеДанные.DSlow Тогда
				ТекущиеДанные.buy = Истина;
			КонецЕсли;
			i = i - 1;
			Продолжить;
			//**************
			Если  ТекущиеДанные.macd >  ТекущиеДанные.Signal и ТекущиеДанные.macd >  Прошлыеданные.macd Тогда
				Процент = ?(ТекущиеДанные.Signal=0,0,ТекущиеДанные.macd*100/ТекущиеДанные.Signal);
				Bull  = Истина;
			ИначеЕсли ТекущиеДанные.Signal >  ТекущиеДанные.macd Тогда
				Процент = ?(ТекущиеДанные.macd=0,0,(ТекущиеДанные.Signal*100/ТекущиеДанные.macd)-100);
				BEAR = Истина;
			КонецЕсли;
			
			//растущий тренд
			//Если Прошлыеданные.macd*100/Прошлыеданные.Signal >BEAR и ТекущиеДанные.macd*100/ТекущиеДанные.Signal >BEAR Тогда
			Если Процент >=90 и Bull Тогда
				
				Если  Прошлыеданные.DSlow >=15 и ТекущиеДанные.DSlow <=65  и ТекущиеДанные.DSlow >  Прошлыеданные.DSlow Тогда
					
					// Если ТекущиеДанные.Hist >=0 и ТекущиеДанные.RSI > Прошлыеданные.RSI Тогда
					
					//рынок перегрет на пике заходить не будем
					//Если ТекущиеДанные.RSI > 70 Тогда
					
					//ИначеЕсли ТекущиеДанные.RSI >= 15 и  ТекущиеДанные.RSI <= 65 Тогда
					
					ТекущиеДанные.buy = Истина;
					
					//СтрокиАктивныхПар = НайтиСтроки(Объект.pairs, Новый Структура("server,Pair",server, pair));
					//НайденныеСтроки = НайтиСтроки(Объект.site_api, Новый Структура("method,update_flag",server,истина));
					//ОткрытыеОрдера = Ложь;
					//i = НайденныеСтроки.Количество();
					//Пока i > 0 Цикл
					//	НастройкаСервера = НайденныеСтроки[i-1];
					//	
					//	ПараметрыЗапроса = Новый Структура;
					//	ПараметрыЗапроса.Вставить("market",pair);
					//	
					//	Если Объект.orders.Количество() > 0 ТОгда
					//		ОткрытыеОрдера = истина;
					//		Прервать;
					//	КонецЕсли;
					//	
					//	//Запрос своих открытых ордеров
					//	Если Ложь Тогда
					//		Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_own_orders, ПараметрыЗапроса, НастройкаСервера.apikey, НастройкаСервера.apisecret, НастройкаСервера.method);
					//		ОтветСписком = ПолучитьСписокСвоихОрдеров(НастройкаСервера.method, Ответ);
					//		Если ОтветСписком = Неопределено Тогда
					//			Продолжить;
					//		КонецЕсли;
					//		Для Каждого Pair Из ОтветСписком Цикл
					//			Если ТипЗнч(Pair) = Тип("КлючИЗначение") И ТипЗнч(Pair.Значение) = Тип("Массив") Тогда
					//				Для Каждого ЭлементОрдера Из Pair.Значение Цикл
					//					СтруктураДанных = ПолучитьСтруктуруОрдера(НастройкаСервера.method, ЭлементОрдера, Pair);
					//					Если СтруктураДанных = Неопределено Или СтруктураДанных.tid = Неопределено Тогда
					//						Продолжить;
					//					КонецЕсли;
					//					СтруктураПоиска = Новый Структура("server, tid", НастройкаСервера.method, СтруктураДанных.tid);
					//					СтрокиТЧ = НайтиСтроки(Объект.orders, СтруктураПоиска);
					//					Если СтрокиТЧ.Количество() > 0 Тогда
					//						ОткрытыеОрдера = истина;
					//					КонецЕсли;
					//				КонецЦикла;
					//			Иначе
					//				СтруктураДанных = ПолучитьСтруктуруОрдера(НастройкаСервера.method, Pair);
					//				Если СтруктураДанных = Неопределено Или СтруктураДанных.tid = Неопределено Тогда
					//					Продолжить;
					//				КонецЕсли;
					//				СтруктураПоиска = Новый Структура("server, tid", НастройкаСервера.method, СтруктураДанных.tid);
					//				СтрокиТЧ = НайтиСтроки(Объект.orders, СтруктураПоиска);
					//				Если СтрокиТЧ.Количество() > 0 Тогда
					//					ОткрытыеОрдера = истина;
					//				КонецЕсли;
					//			КонецЕсли;
					//		КонецЦикла;
					//	КонецЕсли;
					//	Если Не ОткрытыеОрдера Тогда 
					//		price = (СтрокиАктивныхПар[0].buy+СтрокиАктивныхПар[0].last)/2;
					//		
					//		ТекущиеДанные.buy = истина;
					//		amount             = Цел(0.001/price);
					//		Объект.type        = "buy";
					//		Объект.server      = server;
					//		Объект.Pair        = Pair;
					//		Объект.price       = price;
					//		Объект.amount      = amount;
					//		ПараметрыВыполнения = Новый Структура("server, Pair, type, amount, price", server, Pair, "buy", amount, price);
					//		Сообщить("Купить " + Pair + " по цене " + price + " количество " + amount);
					//		Ответ = Истина;
					//		//Ответ = ВыставитьОрдерНаПокупкуПродажу(ПараметрыВыполнения);
					//		
					//		Если Ответ Тогда 
					//			СтрокаТЧ = Объект.orders.Добавить();
					//			СтрокаТЧ.server = server;
					//			СтрокаТЧ.Pair   = Pair;
					//			СтрокаТЧ.price  = price;
					//			СтрокаТЧ.amount = amount;
					//			СтрокаТЧ.type   = "LIMIT_BUY";
					//			Прервать;
					//		КонецЕсли;
					//		
					//		i = i - 1;
					//	КонецЕсли;
					//КонецЦикла;
					
				КонецЕсли;	
			Иначе 
				//тренд падающий		
				Если Процент >=90 и Bear Тогда
					//Если  Прошлыеданные.DSlow >=15 и ТекущиеДанные.DSlow <=65  и ТекущиеДанные.DSlow >  Прошлыеданные.DSlow Тогда
					
						//Если ТекущиеДанные.Hist >=0 и ТекущиеДанные.RSI > Прошлыеданные.RSI Тогда
						
						//рынок перегрет на пике заходить не будем
						Если ТекущиеДанные.RSI > 70 Тогда
							ТекущиеДанные.sell = Истина;
						Конецесли;
					//Конецесли;
					//ИначеЕсли ТекущиеДанные.RSI >= 15 и  ТекущиеДанные.RSI <= 65 Тогда
				Конецесли;
			Конецесли;
			i = i - 1;
			//Прервать;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РасчетМассива(Значение, Массив, МаксРазмер, Расчет = 1)
	Результат = 0;
	МассивПолон = Ложь;
	РазмерМассива = Массив.Количество();
	Если РазмерМассива = МаксРазмер Тогда
		МассивПолон = Истина;
		i = 1;
		Пока i < РазмерМассива Цикл
			Массив[i-1] = Массив[i];
			i = i + 1;
		КонецЦикла;
		Массив[РазмерМассива - 1] = Значение;
	Иначе
		Массив.Добавить(Значение);
		РазмерМассива = Массив.Количество();
	КонецЕсли;
	Пока РазмерМассива > МаксРазмер Цикл
		Массив.Удалить(0);
		РазмерМассива = РазмерМассива - 1;
	КонецЦикла;
	Если Расчет = 1 Тогда
		//Если МассивПолон Тогда
		//	СуммаМассива = 0;
		//	i = 1;
		//	Для Каждого ЭлементМассива Из Массив Цикл
		//		Если i < РазмерМассива Тогда
		//			СуммаМассива = СуммаМассива + ЭлементМассива;
		//		КонецЕсли;
		//		i = i + 1;
		//	КонецЦикла;
		//	Результат = СуммаМассива / (РазмерМассива - 1);
		//Иначе
			СуммаМассива = 0;
			Для Каждого ЭлементМассива Из Массив Цикл
				СуммаМассива = СуммаМассива + ЭлементМассива;
			КонецЦикла;
			Результат = СуммаМассива / РазмерМассива;
		//КонецЕсли;
	ИначеЕсли Расчет = 2 Тогда
		Результат = Массив[0];
		Для Каждого ЭлементМассива Из Массив Цикл
			Результат = Макс(ЭлементМассива,Результат);
		КонецЦикла;
	ИначеЕсли Расчет = 3 Тогда
		Результат = Массив[0];
		Для Каждого ЭлементМассива Из Массив Цикл
			Результат = Мин(ЭлементМассива,Результат);
		КонецЦикла;
	Иначе
	КонецЕсли;
	Возврат Результат;
КонецФункции

&AtClient
Function ema(source, lenght, ema_previows)
	K = 2 /(lenght + 1);
	ema = (source * K) + (ema_previows * (1 - K));
	return ema;
EndFunction

&AtClient
Function macd(source, macd, fastema, slowema, fastLength = 12, slowlength = 26, MACDLength = 9)
	
	fastema = ema(source, fastLength, fastema);
	slowema = ema(source, slowlength, slowema);

	signal = ema(fastema - slowema, MACDLength, macd);
	macd = fastema - slowema;
	return signal;
EndFunction

&НаКлиенте
Функция  ВыставитьОрдерНаПокупкуПродажу(Параметры) Экспорт
 
		СтрокиApi = НайтиСтроки(Объект.site_api, Новый Структура("method", Параметры.server));
		Если СтрокиApi.Количество() = 1 Тогда
			НастройкаСервера = СтрокиApi[0];
			ПараметрыЗапроса = Новый Соответствие;
			Если Параметры.server = "Bittrex" Тогда
				ПараметрыЗапроса.Вставить("market", Параметры.Pair);
				ПараметрыЗапроса.Вставить("quantity", Формат(Параметры.amount, "ЧРД=.; ЧН=0; ЧГ=0"));
				ПараметрыЗапроса.Вставить("rate", Формат(Параметры.price, "ЧРД=.; ЧН=0; ЧГ=0"));
			ИначеЕсли Параметры.server = "BTC-E" Или Параметры.server = "Yobit" Тогда
				ПараметрыЗапроса.Вставить("pair", Параметры.Pair);
				ПараметрыЗапроса.Вставить("type", Параметры.type);
				ПараметрыЗапроса.Вставить("rate", Формат(Параметры.price, "ЧРД=.; ЧН=0; ЧГ=0"));
				ПараметрыЗапроса.Вставить("amount", Формат(Параметры.amount, "ЧРД=.; ЧН=0; ЧГ=0"));
			ИначеЕсли Параметры.server = "Poloniex" Тогда
				ПараметрыЗапроса.Вставить("currencyPair", Параметры.Pair);
				ПараметрыЗапроса.Вставить("rate", Формат(Параметры.price, "ЧРД=.; ЧН=0; ЧГ=0"));
				ПараметрыЗапроса.Вставить("amount", Формат(Параметры.amount, "ЧРД=.; ЧН=0; ЧГ=0"));
			КонецЕсли;
			Если Параметры.type = "buy" Тогда
				Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_buylimit, ПараметрыЗапроса, НастройкаСервера.apikey, НастройкаСервера.apisecret, НастройкаСервера.method);
			ИначеЕсли Параметры.type = "sell" Тогда
				Ответ = ЗапросНаБиржу(НастройкаСервера.url_server, НастройкаСервера.url_selllimit, ПараметрыЗапроса, НастройкаСервера.apikey, НастройкаСервера.apisecret, НастройкаСервера.method);
			КонецЕсли;
			Если ТипЗнч(Ответ) = Тип("Соответствие") Тогда
				Если Ответ.Получить("success") = Истина Тогда
						ПоказатьПредупреждение(,"Ордер успешно выставлен", 2);
					Возврат Истина;
				Иначе
					ПоказатьПредупреждение(,"Произошла ошибка при выставлении ордера: " + Ответ.Получить("message") + Ответ.Получить("error"), 4);
					Возврат Ложь;
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(,"Произошла ошибка при выставлении ордера", 2);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
   
КонецФункции

&НаКлиенте
Процедура HTMLДокументПриНажатии(Элемент, pEvtObj, СтандартнаяОбработка)
    
    Событие = pEvtObj.Event.data;
    Если Событие = "Есть Маркер" Тогда
        Сообщить("Ура" + Событие);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура HTMLДокументДокументСформирован(Элемент)
	ParentWindow = Элементы.HTMLДокумент.Документ.parentWindow;
    Если ParentWindow = Неопределено Тогда
        ParentWindow = Элементы.HTMLДокумент.Документ.defaultView; // Прочие браузеры
    КонецЕсли;	
КонецПроцедуры
